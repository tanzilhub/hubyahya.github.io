<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://debezium.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://debezium.io/" rel="alternate" type="text/html"/><updated>2021-09-02T12:58:38+00:00</updated><id>https://debezium.io/feed.xml</id><title type="html">Debezium</title><subtitle>Debezium is an open source distributed platform for change data capture. Start it up, point it at your databases, and your apps can start responding to all of the inserts, updates, and deletes that other apps commit to your databases. Debezium is durable and fast, so your apps can respond quickly and never miss an event, even when things go wrong.</subtitle><entry><title type="html">Debezium Community Stories With… Sergei Morozov</title><link href="https://debezium.io/blog/2021/08/23/debezium-community-stories-with-sergei-morozov/" rel="alternate" type="text/html" title="Debezium Community Stories With… Sergei Morozov"/><published>2021-08-23T13:50:00+00:00</published><updated>2021-08-23T13:50:00+00:00</updated><id>https://debezium.io/blog/2021/08/23/debezium-community-stories-with-sergei-morozov</id><content type="html" xml:base="https://debezium.io/blog/2021/08/23/debezium-community-stories-with-sergei-morozov/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Welcome to the latest edition of &lt;a href=&quot;/tag/community-stories/&quot;&gt;&quot;Debezium Community Stories With&amp;#8230;&amp;#8203;&quot;&lt;/a&gt;, a series of interviews with members of the Debezium and change data capture community, such as users, contributors or integrators. Today it&amp;#8217;s my pleasure to talk to &lt;a href=&quot;https://twitter.com/srgmrzv&quot;&gt;Sergei Morozov&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;exampleblock centered-image responsive-image&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;img src=&quot;/assets/images/sergeimorozov.jpg&quot; style=&quot;max-width:40%;&quot; class=&quot;responsive-image&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;strong&gt;Sergei, could you introduce yourself? What is your job, if you’re not contributing to Debezium?&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Hi, my name is Sergei, I&amp;#8217;m a Software Architect at &lt;a href=&quot;http://sugarcrm.com/&quot;&gt;SugarCRM&lt;/a&gt;. Most of my career, I&amp;#8217;ve been building software based on the LAMP stack. A few years ago, my team and I started building a data streaming platform meant to integrate the existing SugarCRM products and the new services we wanted to build on top of them. We started prototyping the platform with Maxwell&amp;#8217;s Daemon, AWS Kinesis and DynamoDB and later switched to Kafka, Kafka Connect and Debezium.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Interestingly, Debezium was the reason why we started experimenting with the Kafka ecosystem. The solution we had built before the pivot was only capable of streaming CDC changes but not snapshotting the initial state. During the work on snapshotting, we stumbled upon Debezium and discovered Kafka. After some experimentation and learning more about the ecosystem, we decided to switch the technology stack.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;strong&gt;What are your use cases for Debezium and change data capture in your current project?&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We capture data changes from the products based on MySQL and SQL Server and use them to enable AI and data analytics use cases. Apart from processing recent changes, we store as much historical data as possible. The data comes from thousands of customer databases hosted in the cloud environment.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We use it for AI, analytics, and enabling future use cases. For instance, SugarPredict provides scoring of opportunities and helps sales representatives to focus on those that are more likely to close. The historical data from the CRM and other sources is used to train the AI models. The data change events are used to run the scoring process and update the prediction.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;From the data flow perspective, it looks very simple but there are quite some engineering challenges caused by the flexibility of the products and the cloud scale.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;strong&gt;This sounds really interesting; can you tell us more about the challenges you encountered and how you solved them?&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Absolutely. Let me dive into the details a bit. I hope our ideas and solutions will be helpful to the community.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;em&gt;Flexibility and Data Serialization&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The products that provide data changes are extremely customizable. Customers can create new modules, fields, install extensions, etc. which from the CDC standpoint means that the customers have full control over the database schema. Combined with the scale of thousands of customers, it makes it challenging to use Apache Avro which implies that the schema is managed by the developers.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;A couple of years ago, we tested the then de-facto standard Schema Registry and concluded that it wouldn&amp;#8217;t perform well at the scale of roughly a million message schemas we&amp;#8217;d have in the cloud, not even counting schema versions the number of which is unbounded. For comparison, the accompanying managed offering for that schema registry allows to store up to a thousand schemas. So we resorted to using JSON to serialize data.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;em&gt;Onboarding Challenges&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;SugarCloud is a multi-tenant hosting environment for SugarCRM products. It consists of a few dozens of large MySQL-compatible AWS Aurora clusters that usually host a hundred to a thousand customer databases each. The cluster storage size varies from a few hundred gigabytes to 5 terabytes.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;When a Debezium connector for MySQL first starts, it performs the initial consistent snapshot, and to guarantee the consistency, it usually obtains a short-lived global read lock for capturing the schema of all relevant tables. Since AWS Aurora doesn&amp;#8217;t allow to perform a global lock, Debezium has to lock all tables individually for the entire duration of the snapshot.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The snapshot of a database cluster would take from a few hours to a couple of days which we cannot afford because it would require downtime of all the customer instances hosted on a given cluster. Fortunately, we stumbled upon the great article &lt;a href=&quot;https://thedataguy.in/debezium-mysql-snapshot-for-aws-rds-aurora-from-backup-snaphot/&quot;&gt;Debezium MySQL Snapshot For AWS RDS Aurora From Backup Snaphot&lt;/a&gt; by The Data Guy that describes a workaround that allowed us to snapshot all the data without causing any application downtime. We implemented a shell script that clones the database cluster, records the position in the binlog from which the clone was made, takes a snapshot of the clone and then reconfigures the connector to stream from the position of the snapshot.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;em&gt;Instance Lifecycle Management&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;SugarCloud is a very dynamic environment. Once a customer database has been deployed to one of the clusters, there&amp;#8217;s no guarantee that it will remain there during its entire lifetime. A database can be backed up and restored. It can be moved between clusters in the same AWS region for load-balancing purposes. It can be moved from one AWS region to another if requested by the customer.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Our source connectors are configured to capture all data changes from all databases on a given cluster but not all of them make sense from the data consumers' standpoint. For instance, when a database is restored from a backup on a different cluster, the INSERT statements generated by mysqldump don&amp;#8217;t represent new rows. They represent the state of the database during the backup and should be ignored.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In order to enable post-processing of the raw data, there is a system database on each of the clusters where the cluster management system logs all events relevant to the instance lifecycle (see the &lt;a href=&quot;/blog/2019/02/19/reliable-microservices-data-exchange-with-the-outbox-pattern/&quot;&gt;outbox pattern&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In order to post-process the raw data according to the lifecycle events, we built a Kafka Streams application that is deployed between Debezium and the actual data consumers. Internally, it uses a state store which is effectively a projection of each customer database status (active/maintenance). Prior to restoring a database from a SQL dump, the database is marked as &quot;in maintenance&quot; (an event is emitted to outbox), so all corresponding INSERTs are ignored until the maintenance is over (another event emitted).&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;em&gt;Storage&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The need to store all historical data brings the challenge of having enough storage. Since the end of last year, we&amp;#8217;ve collected more than 120TB of compressed CDC events. Currently we store historical data in S3 but plan to move it back to Kafka once S3-backed tiered storage (&lt;a href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-405%3A+Kafka+Tiered+Storage&quot;&gt;KIP-405&lt;/a&gt;) is available in AWS MSK.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;em&gt;Infrastructure&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We run our software primarily in Kubernetes and manage all of our Kafka-related infrastructure other than brokers themselves with &lt;a href=&quot;https://strimzi.io/&quot;&gt;Strimzi&lt;/a&gt;. Strimzi not only allows to manage applications and Kafka resources using the same tools, it also provides a great foundation for automation.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;When we started designing the data streaming platform, one of the requirements was that it should automatically adjust to certain changes in SugarCloud. For instance, when a new Aurora cluster is deployed, the data streaming pipeline should be deployed for this cluster. Another requirement was that the pipeline should be deployed in multiple AWS regions and be managed via Sugar&amp;#8217;s single control plane, codenamed Mothership. We went one level deeper and built the Mothership Operator that serves as the API for managing the pipeline.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;When a new Aurora cluster is created, Mothership creates a secret in Vault with the database credentials and a StackIngestor. The StackIngestor contains the information about the Aurora cluster: its AWS region, MySQL endpoint, the name of the Vault secret and other technical information. Mothership Operator subscribes to the changes in StackIngestors and manages the Kafka resources that implement the pipeline.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With some exceptions, each pipeline is deployed to the same AWS region where the Aurora cluster is located. There are Strimzi Topic and Cluster operators deployed in each region. The pipeline consists of a few Kafka topics, a source connector (Debezium), a sink connector (S3) and runs on a shared or a dedicated Kafka Connect cluster. For each StackIngestor created in the primary region, Mothership Operator creates the needed Strimzi resources in the regional Kubernetes cluster. The Strimzi operators subscribe to the updates in their resources and manages the corresponding resources in Kafka.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;exampleblock centered-image responsive-image&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;img src=&quot;/assets/images/debezium_community_stories_with_sergei_morozov_architecture.png&quot; style=&quot;max-width:100%;&quot; class=&quot;responsive-image&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;strong&gt;Figure 1. System Overview&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We also use Strimzi to export JMX metrics from Debezium to Prometheus. The Prometheus metrics are visualized in Grafana. We started with a community &lt;a href=&quot;https://grafana.com/grafana/dashboards/11523&quot;&gt;dashboard&lt;/a&gt; (also by The Data Guy) and improved it o better fit the multi-tenant use case.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;exampleblock centered-image responsive-image&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;img src=&quot;/assets/images/debezium_community_stories_with_sergei_morozov_dashboard.png&quot; style=&quot;max-width:100%;&quot; class=&quot;responsive-image&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;strong&gt;Figure 2. Multi-Tenant Debezium Dashboard&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;strong&gt;You’re not only using Debezium but you’ve also contributed to the project. How was your experience doing so?&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In my experience, whatever open-source software I touch – be it at work or for fun – I always end up finding something about that software that needs to be improved to enable my use case.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;I contributed one of my first patches to Debezium (or, more precisely, to its dependency &lt;a href=&quot;https://github.com/osheroff/mysql-binlog-connector-java&quot;&gt;mysql-binlog-connector-java&lt;/a&gt;) back in October 2020. We had just rolled out one of our first connectors to production and had experienced an issue where the connector was consuming all available memory and crashing at a specific position in the binlog. The issue was quite pressing since we had a very limited time before the binlog compaction would kick in and we might start losing data. At the same time, we had just a basic understanding of the Debezium and Kafka Connect architecture and no experience with the Debezium internals.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The whole team had swarmed in and figured out that the connector was misinterpreting a non-standard binlog event that AWS Aurora produced instead of ignoring it. Troubleshooting and finding the root cause was the hardest part. Getting the issue fixed and unit-tested was relatively easy. Although the change wasn&amp;#8217;t that obvious, I&amp;#8217;m glad it was accepted promptly with constructive feedback from the team.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;strong&gt;Are you doing other open-source work, too?&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;I&amp;#8217;m one of the maintainers of the most popular library for relational databases in PHP, &lt;a href=&quot;https://github.com/doctrine/dbal&quot;&gt;Doctrine DBAL&lt;/a&gt;. I made my first contributions there while I was working on integrating the library into the core SugarCRM product and fixed some issues that blocked the integration. It took a few releases to get everything fixed, and at the end I got invited to the core team.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Apart from that, I&amp;#8217;ve been an occasional contributor to some open-source projects in the PHP ecosystem: primarily those that I would use daily like PHPBrew, PHPUnit, PHP_CodeSniffer, Vimeo Psalm and PHP itself.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;strong&gt;Is there anything which you’re missing in Debezium or which you’d like to see improved in the future?&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;While Debezium is a great tool that covers most of the industry-standard database platforms, one the greatest challenges for our team was and still is scaling Debezium to the size of our customer base. The SQL Server connector is currently capable of handling only one logical database per connector. We have hundreds of customer databases hosted on SQL Server, but running a dedicated connector for each of them would require expensive infrastructure and would be hard to manage.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Earlier this year, we started working with the Debezium team on improving the connector and making it capable of capturing changes from multiple databases and running multiple tasks. This way, instead of running hundreds of connectors, we could run a dozen or so. The original design is outlined in &lt;a href=&quot;https://github.com/debezium/debezium-design-documents/pull/1&quot;&gt;DDD-1&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With these changes implemented, one of our production connectors captures changes from over a hundred databases. At the same time, we&amp;#8217;re working on contributing the changes back upstream.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;strong&gt;Bonus question: What’s the next big thing in data engineering?&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Nowadays, especially in multi-tenant environments, it&amp;#8217;s really hard to predict how much time it will take from &quot;it works on my machine&quot; to &quot;it works at the cloud scale&quot;. I&amp;#8217;m looking forward to the time when container orchestration and data streaming platforms become as simple to operate as they look on PowerPoint diagrams.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;strong&gt;Sergei, thanks a lot for taking your time, it was a pleasure to have you here!&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;em&gt;If you’d like to stay in touch with Sergei Morozov and discuss with him, please drop a comment below or follow and reach out to him &lt;a href=&quot;https://twitter.com/srgmrzv&quot;&gt;on Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &lt;/div&gt;</content><author><name>Gunnar Morling</name></author><category term="community"/><category term="community-stories"/><summary type="html">Welcome to the latest edition of &quot;Debezium Community Stories With&amp;#8230;&amp;#8203;&quot;, a series of interviews with members of the Debezium and change data capture community, such as users, contributors or integrators. Today it&amp;#8217;s my pleasure to talk to Sergei Morozov.</summary></entry><entry><title type="html">Introducing the Debezium UI</title><link href="https://debezium.io/blog/2021/08/12/introducing-debezium-ui/" rel="alternate" type="text/html" title="Introducing the Debezium UI"/><published>2021-08-12T00:00:00+00:00</published><updated>2021-08-12T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/08/12/introducing-debezium-ui</id><content type="html" xml:base="https://debezium.io/blog/2021/08/12/introducing-debezium-ui/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We are pleased to announce the first official release of the &lt;strong&gt;Debezium graphical user interface&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As announced &lt;a href=&quot;/blog/2020/10/22/towards-debezium-ui/&quot;&gt;a few months back&lt;/a&gt;, our team has been working on a Debezium UI proof-of-concept. The goal of the PoC was to explore ways in which a graphical UI could facilitate the getting started and operational experience of Debezium users.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Debezium is very flexible - each connector can be configured and fine-tuned in a variety of ways. It provides metrics which give the user insight into the state of the running Debezium connectors, allowing the customer to safely operate CDC pipelines in huge installations with thousands of connectors. This flexibility, however, comes with a learning curve for the user to understand all of the different settings and options.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;To that end, we have produced a UI which will allow users to set up and operate connectors more easily. The UI is now available as part of the Debezium releases for our community!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Let&amp;#8217;s take a closer look at some features of the UI in the following.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;ui_connector_list&quot;&gt;UI Connector List&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The main page of the UI displays all the registered connectors. Some of the highlights of the main page are as follows:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kafka connect cluster&lt;/strong&gt; can be selected via the dropdown in the header.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Connector table shows each connector with it&amp;#8217;s type (MySQL, PostgreSQL, MongoDB), connector status and connector tasks.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A connector row can be expanded to show more details, as shown below with the 'testPostgres' connector. Metrics are shown in the expansion area (&lt;strong&gt;Note:&lt;/strong&gt; this feature is still under development and not functional yet). Connector tasks are shown, with ability to &lt;strong&gt;Restart&lt;/strong&gt; the task if desired.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The kebab menu at the right of each connector row provides actions which allow the user to &lt;strong&gt;Pause, Resume, Restart or Delete&lt;/strong&gt; the connector.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;exampleblock centered-image responsive-image&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;img src=&quot;/assets/images/2021-08-12-debezium-ui/ConnectorsList.png&quot; class=&quot;responsive-image&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;ui_create_connector_wizard&quot;&gt;UI Create Connector Wizard&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The user can create a connector by clicking on the &lt;strong&gt;Create a connector&lt;/strong&gt; button on the main page. The first two steps of the wizard are required, but the remaining steps are optional. Each step will validate the user entries and provide feedback if there are problems. After completing steps 1 and 2 successfully, the user can proceed to the final page to review and create the connector.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect2&quot;&gt; &lt;h3 id=&quot;create_connector_connector_type_required&quot;&gt;Create Connector - Connector type (required)&lt;/h3&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Choose the type of connector in step 1. Currently the &lt;strong&gt;MongoDB, MySQL and PostgreSQL&lt;/strong&gt; connector types are supported. Addition of more connector types is currently in progress.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;exampleblock centered-image responsive-image&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;img src=&quot;/assets/images/2021-08-12-debezium-ui/CreateConnectorStep1.png&quot; class=&quot;responsive-image&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect2&quot;&gt; &lt;h3 id=&quot;create_connector_properties_required&quot;&gt;Create Connector - Properties (required)&lt;/h3&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The basic connection properties for the selected connector are entered in step 2, and the properties must be validated before proceeding. Advanced connection properties are also provided in a separate section of this step. Upon successful validation, the user may proceed to the next steps (Additional properties) - or they can elect to bypass the additional properties and proceed directly to Review.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;exampleblock centered-image responsive-image&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;img src=&quot;/assets/images/2021-08-12-debezium-ui/CreateConnectorStep2.png&quot; class=&quot;responsive-image&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect2&quot;&gt; &lt;h3 id=&quot;create_connector_additional_properties_optional&quot;&gt;Create Connector - Additional properties (optional)&lt;/h3&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Additional properties are optional and can be summarized as follows:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Filter definition&lt;/strong&gt; - entry of &lt;strong&gt;regular expressions&lt;/strong&gt; which define the filters for inclusion/exclusion of the items that will be included for CDC. The included items are displayed as the filters are entered and applied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data options&lt;/strong&gt; - &lt;strong&gt;Snapshot&lt;/strong&gt; and &lt;strong&gt;Mapping&lt;/strong&gt; properties (optional). The defaults can be viewed and changed if desired.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Runtime options&lt;/strong&gt; - &lt;strong&gt;Engine&lt;/strong&gt; and &lt;strong&gt;Heartbeat&lt;/strong&gt; properties (optional). The defaults can be viewed and changed if desired.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect2&quot;&gt; &lt;h3 id=&quot;create_connector_review&quot;&gt;Create Connector - Review&lt;/h3&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The &lt;strong&gt;Review&lt;/strong&gt; step provides a summary of the configuration that will be used to create the connector. If happy with the selections, click 'Finish' to create the connector. If the properties need adjustment, navigate back to the earlier steps.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;exampleblock centered-image responsive-image&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;img src=&quot;/assets/images/2021-08-12-debezium-ui/CreateConnectorReview.png&quot; class=&quot;responsive-image&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;design_considerations&quot;&gt;Design Considerations&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The UI is implemented as a &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt;-based web application. The backend is configured with the URL(s) of one or more Kafka Connect clusters and provides a REST interface for the frontend. The frontend user interface uses &lt;a href=&quot;https://reactjs.org/&quot;&gt;ReactJS&lt;/a&gt; as the primary technology, utilizing &lt;a href=&quot;https://www.patternfly.org/v4/&quot;&gt;Patternfly&lt;/a&gt; react components and design patterns.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As with everything in Debezium, the UI is fully open source (Apache License Version 2.0). You can find the &lt;a href=&quot;https://github.com/debezium/debezium-ui/&quot;&gt;UI Source Code&lt;/a&gt; under the Debezium organization on Github.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;trying_it_out_yourself&quot;&gt;Trying It Out Yourself&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;sect2&quot;&gt; &lt;h3 id=&quot;debezium_ui_container_image&quot;&gt;Debezium UI Container Image&lt;/h3&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Debezium UI &lt;a href=&quot;https://hub.docker.com/r/debezium/debezium-ui&quot;&gt;container image&lt;/a&gt; is available for running the UI. E.g. run the following comand to start the UI and connect it to an existing Kafka Connect instance via Docker (where KAFKA_CONNECT_URI supplies a comma-separated list of the available Kafka Connect URI(s)):&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre&gt;$ docker run -it --rm --name debezium-ui -p 8080:8080 -e KAFKA_CONNECT_URI=http://connect:8083 debezium/debezium-ui:1.7&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The UI connects to Kafka Connect via REST, so you need to make sure that the latter is reachable, e.g. by running both components on the same Docker network.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;admonitionblock note&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;td class=&quot;icon&quot;&gt; &lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class=&quot;content&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Currently, the UI connects to un-authenticated Kafka Connect instances. Also, there&amp;#8217;s no authorization or authentication implemented in the UI itself yet. Until that is the case, you should secure the components e.g. with your own proxy for authorization, if needed.&lt;/p&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect2&quot;&gt; &lt;h3 id=&quot;self_contained_example&quot;&gt;Self-contained example&lt;/h3&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We have also created a self-contained example &lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/ui-demo&quot;&gt;UI demo&lt;/a&gt;, which is included under &lt;a href=&quot;https://github.com/debezium/debezium-examples&quot;&gt;debezium-examples&lt;/a&gt; on Github. The UI demo includes a Docker Compose file which brings up several sources with data as well as the UI. Please refer to the &lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/ui-demo&quot;&gt;README file&lt;/a&gt; for more details on running the Debezium UI demo.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;To learn more about the Debezium UI, please refer to the &lt;a href=&quot;/documentation/reference/operations/debezium-ui.html&quot;&gt;reference documentation&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;next_steps&quot;&gt;Next Steps&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We plan to continue with improvements and new features for the UI in the coming releases. Some items under consideration:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Incorporation of more Debezium connector types, such as the ones for SQL Server and Oracle&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add capability to configure topic creation settings and single message transformations&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Addition and improvement of connector metrics and monitoring&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add capability for viewing and editing connector properties after creation&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&amp;#8230;&amp;#8203;And more!&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We&amp;#8217;d also be very happy to learn about your requirements and feedback on the Debezium UI. Please let us know in the comments below, or send a message to our &lt;a href=&quot;https://groups.google.com/g/debezium&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;em&gt;A big thank you to the team who have contributed in many ways: Ashique Ansari, Indra Shukla, June Zhang, Na Ding, René Kerner and Gunnar Morling!&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Mark Drilling</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="mongo"/><category term="debezium-ui"/><summary type="html">We are pleased to announce the first official release of the Debezium graphical user interface! As announced a few months back, our team has been working on a Debezium UI proof-of-concept. The goal of the PoC was to explore ways in which a graphical UI could facilitate the getting started and operational experience of Debezium users. Debezium is very flexible - each connector can be configured and fine-tuned in a variety of ways. It provides metrics which give the user insight into the state of the running Debezium connectors, allowing the customer to safely operate CDC pipelines in huge installations with thousands of connectors. This flexibility, however, comes with a learning curve for the user to understand all of the different settings and options. To that end, we have produced a UI which will allow users to set up and operate connectors more easily. The UI is now available as part of the Debezium releases for our community!</summary></entry><entry><title type="html">Debezium 1.7.0.Alpha1 Released</title><link href="https://debezium.io/blog/2021/08/02/debezium-1-7-alpha1-released/" rel="alternate" type="text/html" title="Debezium 1.7.0.Alpha1 Released"/><published>2021-08-02T00:00:00+00:00</published><updated>2021-08-02T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/08/02/debezium-1-7-alpha1-released</id><content type="html" xml:base="https://debezium.io/blog/2021/08/02/debezium-1-7-alpha1-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;It&amp;#8217;s my pleasure to announce the first release of the Debezium 1.7 series, &lt;strong&gt;1.7.0.Alpha1&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With the summer in a full-swing, this release brings additional improvements to the Debezium Oracle connector but also to the others as well.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;alternative_oracle_connector_logminer_processors&quot;&gt;Alternative Oracle Connector LogMiner processors&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Debezium connector for Oracle uses an in-memory buffer to cache in-progress transaction changes until the transaction is either committed or rolled back. This cache can require a significant memory footprint depending on the number of events in the transaction, how many concurrent transactions are in-progress, as well as the data itself that represents each event such as large character or binary objects. This can be tough to manage for some environments that have ongoing long-running transactions.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release introduces a significant refactoring to the connector processing code that allows for varied modes of processing LogMiner change events. Out-of-the-box the memory-based implementation remains the default, but we&amp;#8217;ve included a new implementation based on the &lt;a href=&quot;https://infinispan.org/&quot;&gt;Infinispan&lt;/a&gt; distributed data store. This implementation makes it possible to track any number of in-progress transactions regardless of their size or duration.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;To take advantage of the new Infinispan implementation, the following configuration options must be provided:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;span class=&quot;error&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As this is early work, the new Infinispan buffer mode currently has a few limitations:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The Infinispan configuration is not exposed outside to the user for tuning&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only file-based cache store is supported; if you work with multi-node Kafka Connect clusters, a networked filesystem must be used for the cache store in order to support rebalancing of connector tasks in the Connect cluster&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This should not stop you from giving it a test drive and send as much feedback as possible to us for further improvements. We expect to remove the above restrictions in the next release.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;incremental_snapshotting&quot;&gt;Incremental Snapshotting&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The major feature of the 1.6 release has got also new improvements. The Debezium connector for Oracle now supports incremental snapshots in the same way as the other connectors, so Oracle users now can easily add new tables to the capture list and get them snapshotted on the fly.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;For the MySQL connector, there is a new incremental snapshot mode that could be used for databases that do not allow writing to the signal table. &lt;a href=&quot;https://github.com/kgalieva&quot;&gt;Kate Galieva&lt;/a&gt; invented a method based on GTID lists that could be used to provide watermarking without writing to the database. Thank you for the nice contribution!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Altogether, &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.7.0.Alpha1%20ORDER%20BY%20component%20ASC&quot;&gt;49 issues&lt;/a&gt; were fixed for this release. A big thank you goes out to all the community members who contributed: Blake Peno, &lt;a href=&quot;https://github.com/Alfusainey&quot;&gt;Alfusainey Jallow&lt;/a&gt;, &lt;a href=&quot;https://github.com/bingqinzhou&quot;&gt;Bingqin Zhou&lt;/a&gt;, &lt;a href=&quot;https://github.com/blcksrx&quot;&gt;Hossein Torabi&lt;/a&gt;, &lt;a href=&quot;https://github.com/kgalieva&quot;&gt;Katerina Galieva&lt;/a&gt;, &lt;a href=&quot;https://github.com/kyleyj&quot;&gt;Kyley Jex&lt;/a&gt;, &lt;a href=&quot;https://github.com/mpermar&quot;&gt;Martín Pérez&lt;/a&gt;, &lt;a href=&quot;https://github.com/krnaveen14&quot;&gt;Naveen Kumar KR&lt;/a&gt;, &lt;a href=&quot;https://github.com/patrichu-cisco&quot;&gt;Patrick Chu&lt;/a&gt;, &lt;a href=&quot;https://github.com/xaka&quot;&gt;Pavel Strashkin&lt;/a&gt;, &lt;a href=&quot;https://github.com/raphaelauv&quot;&gt;Raphael Auv&lt;/a&gt;, &lt;a href=&quot;https://github.com/morozov&quot;&gt;Sergei Morozov&lt;/a&gt;, &lt;a href=&quot;https://github.com/Thiago-Dantas&quot;&gt;Thiago Dantas&lt;/a&gt;, &lt;a href=&quot;https://github.com/tinntsea&quot;&gt;Tin Nguyen&lt;/a&gt;, &lt;a href=&quot;https://github.com/tommyk-gears&quot;&gt;Tommy Karlsson&lt;/a&gt;, &lt;a href=&quot;https://github.com/elgca&quot;&gt;WenChao Ke&lt;/a&gt;, and &lt;a href=&quot;https://github.com/jjiey&quot;&gt;yangsanity&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;For the upcoming 1.7 preview releases, we&amp;#8217;re planning to focus on completing the follow-up task for the Oracle LogMiner processor and provide the support for JDBC based process too. We will explore incremental snapshotting support for MongoDB and do research on MariaDB support.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;release_of_1_6_1_final&quot;&gt;Release of 1.6.1.Final&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;While the team&amp;#8217;s focus is primarily on 1.7, we have recently fixed &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.6.1.Final%20ORDER%20BY%20component%20ASC&quot;&gt;9 issues&lt;/a&gt; to the 1.6 stream and released &lt;strong&gt;1.6.1.Final&lt;/strong&gt;. You can check out the &lt;a href=&quot;https://debezium.io/releases/1.6/release-notes#release-1.6.1.final&quot;&gt;release notes&lt;/a&gt; for details. We recommend if you&amp;#8217;re using a release prior to 1.6, take this opportunity to upgrade and get access to the latest new features!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Jiri Pechanec</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">It&amp;#8217;s my pleasure to announce the first release of the Debezium 1.7 series, 1.7.0.Alpha1! With the summer in a full-swing, this release brings additional improvements to the Debezium Oracle connector but also to the others as well.</summary></entry><entry><title type="html">Debezium Community Newsletter 01/2021</title><link href="https://debezium.io/blog/2021/07/07/debezium-newsletter-01-2021/" rel="alternate" type="text/html" title="Debezium Community Newsletter 01/2021"/><published>2021-07-07T00:00:00+00:00</published><updated>2021-07-07T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/07/07/debezium-newsletter-01-2021</id><content type="html" xml:base="https://debezium.io/blog/2021/07/07/debezium-newsletter-01-2021/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Welcome to the newest edition of the Debezium community newsletter, in which we share all things CDC related including blog posts, group discussions, as well as StackOverflow questions that are relevant to our user community.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;It&amp;#8217;s been a long time since our last edition. But we are back again! In case you missed our last edition, you can check it out &lt;a href=&quot;/blog/2020/03/31/debezium-newsletter-01-2020/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;upcoming_events&quot;&gt;Upcoming Events&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Due to the ongoing global pandemic, all the conferences, and meet-ups have gone virtual. On the bright side, this means you get to attend some nice events from the comfort of your couch:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.meetup.com/apache-pinot/events/279202435/&quot;&gt;Apache Pinot meet-up&amp;#8201;&amp;#8212;&amp;#8201;&quot;Analyzing Real-time Order Deliveries using CDC with Debezium and Pinot&quot;&lt;/a&gt; by Kenny Bastani and Gunnar Morling&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/live/agenda&quot;&gt;MongoDB.Live&amp;#8201;&amp;#8212;&amp;#8201;&quot;Dissecting our Legacy: The Strangler Fig Pattern with Apache Kafka, Debezium and MongoDB&quot;&lt;/a&gt; by Hans-Peter Grahsl and Gunnar Morling&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;If you&amp;#8217;d like to have a session on Debezium at your virtual meetup or conference, please get in touch!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;articles&quot;&gt;Articles&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;There have been several blog posts about Debezium lately; here are some of the latest ones that you should not miss:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://shopify.engineering/capturing-every-change-shopify-sharded-monolith&quot;&gt;Capturing Every Change From Shopify’s Sharded Monolith&lt;/a&gt; by John Martin and Adam Bellemare&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;/blog/2020/11/04/streaming-vitess-at-bolt/&quot;&gt;Streaming Vitess at Bolt&lt;/a&gt; by Kewei Shang, and Ruslan Gibaiev&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.infoq.com/articles/saga-orchestration-outbox/&quot;&gt;Saga Orchestration for Microservices Using the Outbox Pattern&lt;/a&gt; by Gunnar Morling&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://developers.redhat.com/articles/2021/06/14/application-modernization-patterns-apache-kafka-debezium-and-kubernetes/&quot;&gt;Application modernization patterns with Apache Kafka, Debezium, and Kubernetes&lt;/a&gt; by Bilgin Ibryam&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://inside.getyourguide.com/blog/2021/5/4/enhancing-the-outbox-pattern-with-kafka-streams/&quot;&gt;Enhancing the outbox pattern with Kafka Streams&lt;/a&gt; by Hinrik Örn Sigurðsson&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://thenewstack.io/kubernetes-run-analytics-at-the-edge-postgres-kafka-debezium/&quot;&gt;Kubernetes-Run Analytics at the Edge: Postgres, Kafka, Debezium&lt;/a&gt; by Jonathan Katz&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;/blog/2021/03/18/understanding-non-key-joins-with-quarkus-extension-for-kafka-streams/&quot;&gt;Understanding Non-Key Joins With the Quarkus Extension for Kafka Streams&lt;/a&gt; by Anisha Mohanty&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://medium.com/vimeo-engineering-blog/debezium-event-flattening-with-sql-in-snowflake-b0e8397cfac2/&quot;&gt;Debezium event flattening with SQL in Snowflake&lt;/a&gt; by Obed&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A series of really insightful blog posts about Debezium and change data capture in general by Dunith Dhanushka:&lt;/p&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://medium.com/event-driven-utopia/a-gentle-introduction-to-event-driven-change-data-capture-683297625f9b/&quot;&gt;A Gentle Introduction to Event-driven Change Data Capture&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://medium.com/event-driven-utopia/a-visual-introduction-to-debezium-32563e23c6b8/&quot;&gt;A Visual Introduction to Debezium&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://medium.com/event-driven-utopia/8-practical-use-cases-of-change-data-capture-8f059da4c3b7/&quot;&gt;8 Practical Use Cases of Change Data Capture&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://medium.com/apache-pinot-developer-blog/change-data-analysis-with-debezium-and-apache-pinot-b4093dc178a7/&quot;&gt;Change Data Analysis with Debezium and Apache Pinot&lt;/a&gt; by Kenny Bastani&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://noti.st/morsapaes/liQzgs/change-data-capture-with-flink-sql-and-debezium&quot;&gt;Change Data Capture with Flink SQL and Debezium&lt;/a&gt; by Marta Paes&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.wix.engineering/post/change-data-capture-at-deviantart/&quot;&gt;Change Data Capture at DeviantArt&lt;/a&gt; by Ruslan Danilin&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;And if watching a talk is more your kind of thing, here&amp;#8217;s the recording of the session &lt;a href=&quot;https://2021.berlinbuzzwords.de/session/change-data-streaming-patterns-distributed-systems/&quot;&gt;Change Data Streaming Patterns in Distributed Systems&lt;/a&gt; from this year&amp;#8217;s Berlin Buzzwords, by Gunnar Morling and Hans-Peter Grahsl:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;responsive-video&quot;&gt; &lt;iframe width=&quot;1600&quot; height=&quot;900&quot; src=&quot;https://www.youtube.com/embed/CLv2EcYnr2g&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Please also check out our compiled list of &lt;a href=&quot;/documentation/online-resources/&quot;&gt;resources around Debezium&lt;/a&gt; for even more related posts, articles, podcasts and presentations.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;integrations&quot;&gt;Integrations&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;A few cool integrations and usages of Debezium appeared over the last few weeks and months. Here are several ones which we found especially fascinating:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A Debezium Server &lt;a href=&quot;https://github.com/memiiso/debezium-server-iceberg&quot;&gt;outbound adaptor for Apache Iceberg&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;a href=&quot;https://docs.scylladb.com/using-scylla/integrations/scylla-cdc-source-connector/&quot;&gt;ScyllaDB CDC Source Connector&lt;/a&gt;, based on Debezium&amp;#8217;s CDC connector framework&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/connectors/table/formats/debezium/&quot;&gt;Bespoke support&lt;/a&gt; for the Debezium change event format in Apache Flink&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://materialize.com/docs/sql/create-source/avro-kafka/#kafka-topic-requirements&quot;&gt;Support&lt;/a&gt; for Debezium change events in Materialize&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;If you are getting started with Debezium, you can get hands-on learning and better understanding of how things work from the examples and demos in our &lt;a href=&quot;https://github.com/debezium/debezium-examples&quot;&gt;examples repository&lt;/a&gt;. We have introduced several new examples and updated the existing ones. Out of which we&amp;#8217;d like to highlight some new additions:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/debezium-server-mongo-pubsub/&quot;&gt;Integration of Debezium Server with MongoDB and Pub/Sub (GCP)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/distributed-caching/&quot;&gt;Integration of Debezium with Infinispan&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/kstreams-fk-join/&quot;&gt;Demonstrates non-key joins with the Quarkus Kafka Streams extension&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/monitoring/&quot;&gt;Demonstrates how to monitor a Debezium instance&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/saga&quot;&gt;Demonstrates the implementation of Saga pattern for realizing distributed transactions across multiple microservices&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;If you are interested in showcasing a new demo or an example, please send us a GitHub pull request or reach out to us directly through our community channels found &lt;a href=&quot;/community&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;time_to_upgrade&quot;&gt;Time to Upgrade&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Debezium version &lt;a href=&quot;/blog/2021/06/30/debezium-1-6-final-released/&quot;&gt;1.6.0.Final&lt;/a&gt; was released last week. Apart from Debezium Server sinks for Apache Kafka and Pravega, the 1.6 release brought a brand-new feature for incremental and ad-hoc snapshots, providing long-awaited capabilities like resuming long-running snapshots after a connector restart, Re-snapshotting selected tables during streaming, and snapshotting tables newly added to the list of captured tables after changing the filter configuration. A big shout-out to Netflix engineers Andreas Andreakis and Ioannis Papapanagiotou for their paper &lt;a href=&quot;https://arxiv.org/pdf/2010.12597v1.pdf&quot;&gt;DBLog: A Watermark Based Change-Data-Capture Framework&lt;/a&gt;, upon which incremental snapshotting is based.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Given the long time since the last community newsletter, it&amp;#8217;s also worth mentioning some of the new features added in Debezium 1.5, &lt;a href=&quot;/blog/2021/04/08/debezium-1-5-final-released/&quot;&gt;released in April&lt;/a&gt; this year: the MySQL connector saw a substantial rewrite, now also supporting transaction marker events, Debezium&amp;#8217;s LogMiner-based CDC implementation for Oracle was declared stable, and we&amp;#8217;ve added support for Redis Streams to Debezium Server.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;If you are using an older version, we urge you to check out the latest major release. For details on all the bug fixes, enhancements, and improvements, check out the &lt;a href=&quot;/releases/1.6/release-notes/&quot;&gt;release-notes&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Debezium team has also begun active development on the next version, 1.7. The major focus in 1.7 is implementing incremental snapshotting for more connectors (MongoDB, Oracle), reworking the transaction buffer for the Oracle connector, and expanding the Debezium UI. For details on the further upcoming release check out the &lt;a href=&quot;/docs/roadmap/&quot;&gt;Debezium roadmap&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;You can keep track of bug fixes, enhancements, and changes that will be coming up in the 1.7 release by visiting our &lt;a href=&quot;/releases/&quot;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;questions_and_answers&quot;&gt;Questions and Answers&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/68073799/mongodb-as-sink-connector-not-capturing-data-as-expected-kafka&quot;&gt;MongoDB as sink connector not capturing data as expected - kafka?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/67823515/additional-unique-index-referencing-columns-not-exposed-by-cdc-causes-exception&quot;&gt;Additional unique index referencing columns not exposed by CDC causes exception&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/66384583/unable-to-deserialise-dynamic-json-with-jackson-using-generics&quot;&gt;Unable to deserialise dynamic json with Jackson using generics&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/66150335/the-connector-does-not-work-after-stopping-the-debezium-connector-with-ctrlc-an&quot;&gt;The connector does not work after stopping the Debezium Connector with Ctrl+C and restart the connector again&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/66123544/debezium-heartbeat-action-not-firing&quot;&gt;Debezium Heartbeat Action not firing&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/66816670/flink-interrupted-while-waiting-for-data-to-be-acknowledged-by-pipeline&quot;&gt;Flink: Interrupted while waiting for data to be acknowledged by pipeline&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/67330280/cdc-with-debezium-in-docker&quot;&gt;CDC with debezium in docker&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/67368304/is-debezium-sqlserver-connector-task-multi-threading&quot;&gt;Is debezium sqlServer connector task multi-threading?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/68148783/how-to-create-subject-for-ksqldb-from-kafka-tapic&quot;&gt;How to create subject for ksqldb from kafka topic&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/65682694/debezium-kafka-connect-is-there-a-way-to-send-only-payload-and-not-schema&quot;&gt;Debezium, Kafka connect: is there a way to send only payload and not schema?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;getting_involved&quot;&gt;Getting Involved&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Getting started with a huge, and an existing code base can be intimidating, but we want to make sure that the process of getting started is extremely easy and smooth for you here. We are now a vibrant community with &lt;a href=&quot;https://github.com/debezium/debezium/graphs/contributors&quot;&gt;270+ contributors&lt;/a&gt; overall, and we welcome all kinds of community contributions, discussions, and enhancements. As a beginner you can grab some of the issues labeled with &lt;code&gt;easy-starter&lt;/code&gt; if you want to dive in quickly. Below is a list of issues that are open to grab:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Document &quot;schema.include.list&quot;/&quot;schema.exclude.list&quot; for SQL Server connector (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2793&quot;&gt;DBZ-2793&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Limit log output for &quot;Streaming requested from LSN&quot; warnings (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3007&quot;&gt;DBZ-3007&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create smoke test to make sure Debezium Server container image works (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3226&quot;&gt;DBZ-3226&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add signal table automatically to include list (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3293&quot;&gt;DBZ-3293&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Implement support for JSON_TABLE in MySQL parser (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3575&quot;&gt;DBZ-3575&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Implement window function in MySQL parser (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3576&quot;&gt;DBZ-3576&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Standardize &quot;snapshot.fetch.size default&quot; values across connectors (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3694&quot;&gt;DBZ-3694&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;If you are new to open source, please check out our &lt;a href=&quot;https://github.com/debezium/debezium.github.io/blob/develop/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; to get started!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;call_to_action&quot;&gt;Call to Action&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Our &lt;a href=&quot;https://www.debezium.io/community/users&quot;&gt;community users&lt;/a&gt; page includes a variety of organizations that are currently using Debezium. If you are a user of Debezium, and would like to be included, please send us a GitHub pull request or reach out to us directly through our community channels found &lt;a href=&quot;/community&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;And if you haven&amp;#8217;t yet done so, please consider &lt;a href=&quot;https://github.com/debezium/debezium/stargazers&quot;&gt;adding a ⭐&lt;/a&gt; for the GitHub repo; keep them coming, we&amp;#8217;re almost at 5,000 stars!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Also, we&amp;#8217;d like to learn about your requirements for future Debezium versions. In particular, we&amp;#8217;d be very curious about your feedback on the &lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/saga&quot;&gt;CDC-based Sagas approach&lt;/a&gt; mentioned above. Is it something you&amp;#8217;d like to see supported in our &lt;a href=&quot;/documentation/reference/integrations/outbox.html&quot;&gt;Quarkus extension&lt;/a&gt; for instance? Please let us know about this, as well as any other feedback you may have, via the Debezium &lt;a href=&quot;https://groups.google.com/g/debezium&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Lastly, we&amp;#8217;re planning to continue our interview series &lt;a href=&quot;/blog/2020/10/08/debezium-community-stories-with-renato-mefi/&quot;&gt;Debezium Community Stories With&amp;#8230;&amp;#8203;&lt;/a&gt;; so if you got exciting stories to tell about your usage of Debezium, please reach out!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;And as always, stay safe, and healthy. Wish you and your loved ones good health and strength.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Anisha Mohanty</name></author><category term="community"/><category term="news"/><category term="newsletter"/><summary type="html">Welcome to the newest edition of the Debezium community newsletter, in which we share all things CDC related including blog posts, group discussions, as well as StackOverflow questions that are relevant to our user community. It&amp;#8217;s been a long time since our last edition. But we are back again! In case you missed our last edition, you can check it out here.</summary></entry><entry><title type="html">Debezium 1.6.0.Final Released</title><link href="https://debezium.io/blog/2021/06/30/debezium-1-6-final-released/" rel="alternate" type="text/html" title="Debezium 1.6.0.Final Released"/><published>2021-06-30T00:00:00+00:00</published><updated>2021-06-30T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/06/30/debezium-1-6-final-released</id><content type="html" xml:base="https://debezium.io/blog/2021/06/30/debezium-1-6-final-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;I&amp;#8217;m pleased to announce the release of Debezium &lt;strong&gt;1.6.0.Final&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release is packed full with tons of new features, including support for incremental snapshotting that can be toggled using the new the &lt;a href=&quot;/documentation/reference/1.6/configuration/signalling.html&quot;&gt;Signal API&lt;/a&gt;. Based on the excellent paper &lt;a href=&quot;https://arxiv.org/pdf/2010.12597v1.pdf&quot;&gt;DBLog: A Watermark Based Change-Data-Capture Framework&lt;/a&gt; by Netflix engineers Andreas Andreakis and Ioannis Papapanagiotou, the notion of incremental snapshotting addresses several requirements around snapshotting that came up repeatedly in the Debezium community:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Ability to resume an on-going snapshot after a connector restart&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Re-snapshot selected tables during streaming, e.g. to re-bootstrap Kafka topics with change events for specific tables&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Snapshot tables newly added to the list of captured tables after changing the filter configuration&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Begin to stream changes while an initial snapshot is running&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Incremental snapshotting is an incubating feature as of Debezium 1.6, and we&amp;#8217;re looking forward to your feedback on this feature. To learn more about this functionality, please refer to the individual connector docs, e.g. for the Debezium &lt;a href=&quot;/documentation/reference/1./connectors/mysql#_incremental_snapshot&quot;&gt;MySQL connector&lt;/a&gt;. There are already some follow-up improvements in this area in the workings, for instance the &lt;a href=&quot;https://github.com/debezium/debezium/pull/2430&quot;&gt;usage of MySQL GTIDs&lt;/a&gt; for setting the high/low watermarks required for this snapshotting approach, which will avoid the need for write access to the database by the connector. You can expect these improvements to be rolled out in one of the upcoming 1.7 preview releases.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Besides incremental snapshotting, other new features in Debezium 1.6 include two brand new &lt;a href=&quot;/documentation/reference/1.6/operations/debezium-server.html&quot;&gt;Debezium Server&lt;/a&gt; sinks, one for Apache Kafka and another for &lt;a href=&quot;https://pravega.io/&quot;&gt;Pravega&lt;/a&gt;, as well as several notable enhancements to the &lt;a href=&quot;/documentation/reference/1.6/connectors/oracle.html&quot;&gt;Debezium connector for Oracle&lt;/a&gt; which include reacting to DDL schema changes and an opt-in, incubating feature to emit &lt;code&gt;BLOB&lt;/code&gt; and &lt;code&gt;CLOB&lt;/code&gt; column data types. There&amp;#8217;s also improvements to the community-led connectors for &lt;a href=&quot;/documentation/reference/1.6/connectors/vitess.html&quot;&gt;Vitess&lt;/a&gt; and &lt;a href=&quot;/documentation/reference/1.6/connectors/cassandra.html&quot;&gt;Apache Cassandra&lt;/a&gt;, as well as wide range of bug fixes and other smaller improvements. We&amp;#8217;ve also upgraded the &lt;a href=&quot;/documentation/reference/1.6/integrations/outbox.html&quot;&gt;Debezium Quarkus extension&lt;/a&gt; for implementing the outbox pattern to Quarkus 2.0.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Across all the 1.6 preview and the final releases, a grand total of &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20in%20(1.6.0.Alpha1%2C%201.6.0.Beta1%2C%201.6.0.Beta2%2C%201.6.0.CR1%2C%201.6.0.Final)&quot;&gt;188 issues&lt;/a&gt; has been addressed.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;For more details, please see the earlier announcements for the &lt;a href=&quot;/blog/2021/05/06/debezium-1-6-alpha1-released/&quot;&gt;1.6.0 Alpha1&lt;/a&gt;, &lt;a href=&quot;/blog/2021/05/20/debezium-1-6-beta1-released/&quot;&gt;Beta1&lt;/a&gt;, &lt;a href=&quot;/blog/2021/06/10/debezium-1-6-beta2-released/&quot;&gt;Beta2&lt;/a&gt;, and &lt;a href=&quot;/blog/2021/06/24/debezium-1-6-cr1-released/&quot;&gt;CR1&lt;/a&gt; releases.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Since the CR1 release, we&amp;#8217;ve primarily focused on documentation improvements and some bug fixes. But there was one last-minute feature addition, too, which allows you to specify archive log locations (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3661&quot;&gt;DBZ-3661&lt;/a&gt;) for the Oracle connector.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Please refer to the &lt;a href=&quot;/releases/1.6/release-notes#release-1.6.0-final&quot;&gt;release notes&lt;/a&gt; of Debezium 1.6.0.Final for the complete list of resolved issues as well as procedures for upgrading from earlier versions.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As always, a big thank you to all the members from the community who helped with this release, be it via code contributions, bug report, testing, providing insight and expertise, etc. Kudos to the following individuals from the community which contributed to Debezium 1.6, bringing the &lt;a href=&quot;https://github.com/debezium/debezium/graphs/contributors&quot;&gt;overall number&lt;/a&gt; of contributors to the Debezium core repository to 277:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ani-sha&quot;&gt;Anisha Mohanty&lt;/a&gt;, &lt;a href=&quot;https://github.com/bingqinzhou&quot;&gt;Bingqin Zhou&lt;/a&gt;, &lt;a href=&quot;https://github.com/roldanbob&quot;&gt;Bob Roldan&lt;/a&gt;, &lt;a href=&quot;https://github.com/camilesing&quot;&gt;Camile Sing&lt;/a&gt;, &lt;a href=&quot;https://github.com/CaoManhDat&quot;&gt;Cao Manh Dat&lt;/a&gt;, &lt;a href=&quot;https://github.com/ccollingwood&quot;&gt;Chris Collingwood&lt;/a&gt;, &lt;a href=&quot;https://github.com/derekm&quot;&gt;Derek Moore&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslep&quot;&gt;Eric Slep&lt;/a&gt;, &lt;a href=&quot;https://github.com/gvaquez-ubi&quot;&gt;Gilles Vaquez&lt;/a&gt;, &lt;a href=&quot;https://github.com/blcksrx&quot;&gt;Hossein Torabi&lt;/a&gt;, &lt;a href=&quot;https://github.com/piee9818&quot;&gt;Hyunjin Oh&lt;/a&gt;, &lt;a href=&quot;https://github.com/jcechace&quot;&gt;Jakub Cechacek&lt;/a&gt;, &lt;a href=&quot;https://github.com/JapuDCret&quot;&gt;JapuDCret&lt;/a&gt;, &lt;a href=&quot;https://github.com/novotnyJiri&quot;&gt;Jiri Novotny&lt;/a&gt;, &lt;a href=&quot;https://github.com/kppullin&quot;&gt;Kevin Pullin&lt;/a&gt;, &lt;a href=&quot;https://github.com/truman303&quot;&gt;Mike&lt;/a&gt;, &lt;a href=&quot;https://github.com/ojacquemart&quot;&gt;Olivier Jacquemart&lt;/a&gt;, &lt;a href=&quot;https://github.com/patrichu-cisco&quot;&gt;Patrick Chu&lt;/a&gt;, &lt;a href=&quot;https://github.com/roldanbob&quot;&gt;Robert Roldan&lt;/a&gt;, &lt;a href=&quot;https://github.com/sarafonseca-123&quot;&gt;Sara Fonseca&lt;/a&gt;, &lt;a href=&quot;https://github.com/morozov&quot;&gt;Sergei Morozov&lt;/a&gt;, &lt;a href=&quot;https://github.com/siufay325&quot;&gt;SiuFay&lt;/a&gt;, &lt;a href=&quot;https://github.com/smiklosovic&quot;&gt;Stefan Miklosovic&lt;/a&gt;, &lt;a href=&quot;https://github.com/zifeo&quot;&gt;Teo Stocco&lt;/a&gt;, &lt;a href=&quot;https://github.com/TAregger&quot;&gt;Thomas Aregger&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ramanenka&quot;&gt;Vadzim Ramanenka&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;outlook&quot;&gt;Outlook&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As always, Debezium will be following its normal quarterly release cadence with Debezium 1.7 planned by the end of September. There are a couple of key issues we intend to work on over the course of this version including support for incremental snapshots with the MongoDB and Oracle connectors. Additionally, we plan to explore some new buffering options for the Oracle connector&amp;#8217;s LogMiner-based implementation, work on a tool for compacting large schema history topics, expand the feature set of &lt;a href=&quot;https://github.com/debezium/debezium-ui/&quot;&gt;Debezium UI&lt;/a&gt;, and much more.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In the coming week(s), keep an eye out on our &lt;a href=&quot;https://debezium.io/roadmap/&quot;&gt;roadmap&lt;/a&gt; as we&amp;#8217;ll be refining this in preparations for Debezium 1.7. If you have any specific feature requests or other input for the roadmap and future releases, please let us know via the &lt;a href=&quot;https://groups.google.com/g/debezium&quot;&gt;mailing list&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">I&amp;#8217;m pleased to announce the release of Debezium 1.6.0.Final! This release is packed full with tons of new features, including support for incremental snapshotting that can be toggled using the new the Signal API. Based on the excellent paper DBLog: A Watermark Based Change-Data-Capture Framework by Netflix engineers Andreas Andreakis and Ioannis Papapanagiotou, the notion of incremental snapshotting addresses several requirements around snapshotting that came up repeatedly in the Debezium community:</summary></entry><entry><title type="html">Debezium 1.6.0.CR1 Released</title><link href="https://debezium.io/blog/2021/06/24/debezium-1-6-cr1-released/" rel="alternate" type="text/html" title="Debezium 1.6.0.CR1 Released"/><published>2021-06-24T00:00:00+00:00</published><updated>2021-06-24T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/06/24/debezium-1-6-cr1-released</id><content type="html" xml:base="https://debezium.io/blog/2021/06/24/debezium-1-6-cr1-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;It&amp;#8217;s my pleasure to announce the release of Debezium &lt;strong&gt;1.6.0.CR1&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release adds skipped operations optimizations for SQL Server, introduces Heartbeat support to the Oracle connector, Oracle BLOB/CLOB support is now opt-in only, and provides a range of bug fixes and other improvements across different Debezium connectors.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;skipped_operations_optimizations_sql_server&quot;&gt;Skipped operations optimizations - SQL Server&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Debezium introduced the notion of &lt;code&gt;skipped.operations&lt;/code&gt; some time ago. This feature allows connectors to control what change events are emitted during the streaming phase, optionally omitting certain change types such as updates or deletes.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The &lt;code&gt;skipped.operations&lt;/code&gt; feature was originally implemented to act more like an SMT where it was a filter that was applied toward the end of the CDC pipeline just before an event was emitted. While this worked well, there was an optimization that could be achieved here because SQL Server records the change type in the capture table along side the change data. Using this knowledge, the query to fetch changes from the capture table was adjusted so that the changes returned from SQL Server are pre-filtered based on these &quot;skipped operations&quot;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Overall, this optimization should improve both the time spent during iterations of capturing changes when the connector is configured to use &lt;code&gt;skipped.operations&lt;/code&gt; as well as reduce the overall garbage collection that the connector may do over its lifetime due to generating fewer objects that are later discarded.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Many thanks to &lt;a href=&quot;https://github.com/blcksrx&quot;&gt;Hossein Torabi&lt;/a&gt; for identifying this optimization and contributing it!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;heartbeat_support_for_the_oracle_connector&quot;&gt;Heartbeat Support for the Oracle Connector&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Debezium supports heartbeats across its other connectors, this feature is now available to Oracle!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;A heartbeat is a critical part of insuring that a connector&amp;#8217;s offsets remain synchronized with Kafka. Normally, the offsets are automatically maintained by Kafka Connect when we emit an event to a topic. But there are circumstances where event emission can be infrequent enough that stale offsets become a concern.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Regardless which adapter the Debezium Oracle connector is deployed to use, there are situations where events may be seen by the connector and in-memory offset state is updated but because we don&amp;#8217;t emit an event to Kafka, the offsets aren&amp;#8217;t synchronized to Kafka Connect. A great example is when the connector could be capturing changes for a table that changes very infrequently compared to other tables in the data source.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In order to guarantee that offsets remain synchronized with Kafka Connect, specifically during periods of low capture activity, the &lt;code&gt;heartbeat.interval.ms&lt;/code&gt; configuration option can be set to periodically keep offsets in sync.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;oracle_blobclob_support_now_opt_in&quot;&gt;Oracle BLOB/CLOB Support now Opt-In&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;While we added support for &lt;code&gt;BLOB&lt;/code&gt; and &lt;code&gt;CLOB&lt;/code&gt; data types to the Debezium connector for Oracle in an earlier 1.6 pre-release, we believe that the work towards fully supporting these types is still an ongoing one.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;There is a certain amount of overhead the connector has when handling BLOB and CLOB fields. Transactions which contain these data types require a reconciliation step at commit-time to merge certain events into a single logical emitted event. Additionally, LOB data types require a certain amount of memory footprint for their values to be kept in memory while the event to be emitted is constructed. Furthermore, users may not want to have LOB data emitted at all due to the size of the data.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;So with that, the Oracle connector&amp;#8217;s support for LOB data types is now an opt-in only feature. This means that OOTB the connector won&amp;#8217;t attempt to capture LOB column data. If LOB columns need to be captured by the connector, the connector option, &lt;code&gt;lob.enabled&lt;/code&gt;, must be set to &lt;code&gt;true&lt;/code&gt; so that the connector will pickup and process those column types.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Lastly, we also felt that since there is still some ongoing effort for BLOB and CLOB support, it made sense to denote LOB support as &lt;em&gt;incubating&lt;/em&gt; for the short-term until we believe the solution has matured. We strongly encourage users who want to capture LOB-based columns to enable LOB support and give it test drive and provide any and all feedback, both good or bad, so that we can continue to improve support for LOB columns.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;further_improvements_and_bugfixes&quot;&gt;Further Improvements and Bugfixes&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Debezium connector for Oracle also saw quite a number of small improvements (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3612&quot;&gt;DBZ-3612&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3616&quot;&gt;DBZ-3616&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3619&quot;&gt;DBZ-3619&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3631&quot;&gt;DBZ-3631&lt;/a&gt;). These improvements focused on improving the DDL parser as well as logging.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With the recent release of Quarkus 2.0.0.Final, the Quarkus Outbox extension is now based on Quarkus 2.0 (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3602&quot;&gt;DBZ-3602&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Overall, &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20=%2012317320%20AND%20fixVersion%20=%2012358695%20ORDER%20BY%20priority%20DESC,%20key%20ASC&quot;&gt;27 issues&lt;/a&gt; have been addressed in Debezium 1.6.0.CR1. We&amp;#8217;re deeply grateful to all the community members contributing to this release:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/roldanbob&quot;&gt;Bob Roldan&lt;/a&gt;, &lt;a href=&quot;https://github.com/camilesing&quot;&gt;Camile Sing&lt;/a&gt;, &lt;a href=&quot;https://github.com/Naros&quot;&gt;Chris Cranford&lt;/a&gt;, &lt;a href=&quot;https://github.com/derekm&quot;&gt;Derek Moore&lt;/a&gt;, &lt;a href=&quot;https://github.com/gunnarmorling&quot;&gt;Gunnar Morling&lt;/a&gt;, &lt;a href=&quot;https://github.com/blcksrx&quot;&gt;Hossein Torabi&lt;/a&gt;, &lt;a href=&quot;https://github.com/piee9818&quot;&gt;Hyunjin Oh&lt;/a&gt;, &lt;a href=&quot;https://github.com/jcechace&quot;&gt;Jakub Cechacek&lt;/a&gt;, &lt;a href=&quot;https://github.com/JapuDCret&quot;&gt;JapuDCret&lt;/a&gt;, &lt;a href=&quot;https://github.com/jpechane&quot;&gt;Jiri Pechanec&lt;/a&gt;, and &lt;a href=&quot;https://github.com/morozov&quot;&gt;Sergei Morozov&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With CR1 out, we&amp;#8217;re nearing the end of the stablization phase for the 1.6 release cycle. You can expect possibly one more CR (candidate release), before the final release, which is planned for the end of the month, barring any unforeseen complications of cause. Besides some more bug fixes and documentation improvements we&amp;#8217;re also intending to upgrade to Apache Kafka 2.8, which will allow you to take a sneak peak at using Debezium with &lt;a href=&quot;https://www.morling.dev/blog/exploring-zookeeper-less-kafka/&quot;&gt;ZooKeeper-less Kafka&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In parallel, we&amp;#8217;re going to work on the roadmap for Debezium 1.7 (due by the end of September). Please get in touch via the &lt;a href=&quot;https://groups.google.com/g/debezium/&quot;&gt;mailing list&lt;/a&gt; if you have specific feature requests for this release!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="outbox"/><summary type="html">It&amp;#8217;s my pleasure to announce the release of Debezium 1.6.0.CR1! This release adds skipped operations optimizations for SQL Server, introduces Heartbeat support to the Oracle connector, Oracle BLOB/CLOB support is now opt-in only, and provides a range of bug fixes and other improvements across different Debezium connectors.</summary></entry><entry><title type="html">Debezium 1.6.0.Beta2 Released</title><link href="https://debezium.io/blog/2021/06/10/debezium-1-6-beta2-released/" rel="alternate" type="text/html" title="Debezium 1.6.0.Beta2 Released"/><published>2021-06-10T00:00:00+00:00</published><updated>2021-06-10T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/06/10/debezium-1-6-beta2-released</id><content type="html" xml:base="https://debezium.io/blog/2021/06/10/debezium-1-6-beta2-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;It&amp;#8217;s my pleasure to announce the release of Debezium &lt;strong&gt;1.6.0.Beta2&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release adds support for Pravega to Debezium Server, expands the snapshotting options of the Debezium Oracle connector, and provides a range of bug fixes and other improvements across different Debezium connectors.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;pravega_support_for_debezium_server&quot;&gt;Pravega Support for Debezium Server&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With &lt;a href=&quot;/documentation/reference/operations/debezium-server.html&quot;&gt;Debezium Server&lt;/a&gt;, we&amp;#8217;re on a mission to bring open-source change data capture to all the users, no matter which data streaming platform or commit log they are using. So we are very happy to receive a contribution which adds support for &lt;a href=&quot;https://pravega.io/&quot;&gt;Pravega&lt;/a&gt; to Debezium Server. A Cloud Native Computing Foundation (CNCF) sandbox and Apache 2.0 licensed open-source project, Pravega describes itself as a &quot;storage abstraction for continuously generated and unbounded data&quot;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Debezium Server Pravega sink adapter offers two modes: non-transactional and transactional. The non-transactional mode individually writes each event in a Debezium batch to Pravega. The transactional mode writes the Debezium batch to a Pravega transaction that commits when the batch is completed.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;To learn more about using Debezium with Pravega, please refer to the &lt;a href=&quot;/documentation/reference/operations/debezium-server.html#_pravega&quot;&gt;documentation&lt;/a&gt;. Many thanks to &lt;a href=&quot;https://twitter.com/derekm00r3&quot;&gt;Derek Moore&lt;/a&gt; for this fantastic contribution!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;oracle_snapshotting_improvements&quot;&gt;Oracle Snapshotting Improvements&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Debezium connector for Oracle received two improvements related to snapshotting:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Support for the &lt;code&gt;snapshot.include.collection.list&lt;/code&gt; option (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3062&quot;&gt;DBZ-3062&lt;/a&gt;); this allows to create an initial snapshot only for a subset of all those tables captured by the connector&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New option &lt;code&gt;snapshot.locking.mode&lt;/code&gt; which provides control over the locking behavior when the connector captures the schema of the tables (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3557&quot;&gt;DBZ-3557&lt;/a&gt;); in particular, this allows to disable locking completely, which is very useful if you can guarantee that no DDL changes are happening while the connector is taking the (schema) snapshot&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In addition, there&amp;#8217;s several bug fixes for this connector, including a few ones related to DDL and DML parsing (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3545&quot;&gt;DBZ-3545&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3549&quot;&gt;DBZ-3549&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3554&quot;&gt;DBZ-3554&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3606&quot;&gt;DBZ-3606&lt;/a&gt;), handling of RAC installations (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3563&quot;&gt;DBZ-3563&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3599&quot;&gt;DBZ-3599&lt;/a&gt;), and more efficient handling of LOB columns (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3556&quot;&gt;DBZ-3556&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;further_improvements_and_bugfixes&quot;&gt;Further Improvements and Bugfixes&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Debezium connector for SQL Server saw two performance-related improvments (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3486&quot;&gt;3486&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3515&quot;&gt;DBZ-3515&lt;/a&gt;). The schemas of change events from the Postgres connector contain default values now, based on the source column definition (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2790&quot;&gt;DBZ-2790&lt;/a&gt;). This comes in handy for instance when deriving downstream table schemas from a change event stream.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Other fixes include correct identification of primary members in MongoDB replica sets (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3522&quot;&gt;DBZ-3522&lt;/a&gt;), support for the &lt;code&gt;JSON&lt;/code&gt; function in the MySQL connector&amp;#8217;s DDL parser (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3559&quot;&gt;DBZ-3559&lt;/a&gt;), and the upgrade of the &lt;a href=&quot;/documentation/reference/integrations/outbox.html&quot;&gt;Debezium Quarkus extension&lt;/a&gt; for implementing the outbox pattern to Quarkus 2.0 (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3550&quot;&gt;DBZ-3550&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Overall, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-400?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.6.0.Beta2%20ORDER%20BY%20key%20ASC%2C%20component%20ASC&quot;&gt;48 issues&lt;/a&gt; have been addressed in Debezium 1.6.0.Beta2. We&amp;#8217;re deeply grateful to all the community members contributing to this release:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/ani-sha&quot;&gt;Anisha Mohanty&lt;/a&gt;, &lt;a href=&quot;https://github.com/bingqinzhou&quot;&gt;Bingqin Zhou&lt;/a&gt;, &lt;a href=&quot;https://github.com/roldanbob&quot;&gt;Bob Roldan&lt;/a&gt;, &lt;a href=&quot;https://github.com/ccollingwood&quot;&gt;Chris Collingwood&lt;/a&gt;, &lt;a href=&quot;https://github.com/Naros&quot;&gt;Chris Cranford&lt;/a&gt;, &lt;a href=&quot;https://github.com/derekm&quot;&gt;Derek Moore&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslep&quot;&gt;Eric Slep&lt;/a&gt;, &lt;a href=&quot;https://github.com/gvaquez-ubi&quot;&gt;Gilles Vaquez&lt;/a&gt;, &lt;a href=&quot;https://github.com/gunnarmorling&quot;&gt;Gunnar Morling&lt;/a&gt;, Jackey Zhang, &lt;a href=&quot;https://github.com/jcechace&quot;&gt;Jakub Cechacek&lt;/a&gt;, &lt;a href=&quot;https://github.com/novotnyJiri&quot;&gt;Jiri Novotny&lt;/a&gt;, &lt;a href=&quot;https://github.com/jpechane&quot;&gt;Jiri Pechanec&lt;/a&gt;, &lt;a href=&quot;https://github.com/kppullin&quot;&gt;Kevin Pullin&lt;/a&gt;, &lt;a href=&quot;https://github.com/patrichu-cisco&quot;&gt;Patrick Chu&lt;/a&gt;, &lt;a href=&quot;https://github.com/roldanbob&quot;&gt;Robert Roldan&lt;/a&gt;, &lt;a href=&quot;https://github.com/sarafonseca-123&quot;&gt;Sara Fonseca&lt;/a&gt;, &lt;a href=&quot;https://github.com/morozov&quot;&gt;Sergei Morozov&lt;/a&gt;, &lt;a href=&quot;https://github.com/smiklosovic&quot;&gt;Stefan Miklosovic&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ramanenka&quot;&gt;Vadzim Ramanenka&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With Beta2 through the door, we&amp;#8217;re entering the stabilization phase for the 1.6 release cycle. You can expect one or two CRs (candidate releases), before the final release, which is planned for the end of the month, barring any unforeseen complications of cause. Besides some more bug fixes and documentation improvements we&amp;#8217;re also intending to upgrade to Apache Kafka 2.8, which will allow you to take a sneak peak at using Debezium with &lt;a href=&quot;https://www.morling.dev/blog/exploring-zookeeper-less-kafka/&quot;&gt;ZooKeeper-less Kafka&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In parallel, we&amp;#8217;re going to work on the roadmap for Debezium 1.7 (due by the end of September). Please get in touch via the &lt;a href=&quot;https://groups.google.com/g/debezium/&quot;&gt;mailing list&lt;/a&gt; if you have specific feature requests for this release!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Gunnar Morling</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="outbox"/><summary type="html">It&amp;#8217;s my pleasure to announce the release of Debezium 1.6.0.Beta2! This release adds support for Pravega to Debezium Server, expands the snapshotting options of the Debezium Oracle connector, and provides a range of bug fixes and other improvements across different Debezium connectors.</summary></entry><entry><title type="html">Debezium 1.5.2.Final Released</title><link href="https://debezium.io/blog/2021/05/28/debezium-1-5-2-final-released/" rel="alternate" type="text/html" title="Debezium 1.5.2.Final Released"/><published>2021-05-28T00:00:00+00:00</published><updated>2021-05-28T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/05/28/debezium-1-5-2-final-released</id><content type="html" xml:base="https://debezium.io/blog/2021/05/28/debezium-1-5-2-final-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Let me announce the bugfix release of Debezium 1.5, &lt;strong&gt;1.5.2.Final&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release is a rebuild of 1.5.1.Final using Java 8.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Debezium 1.5.1.Final was incorrectly built using Java 11. That would prevent it running in environments still using Java 8. This version is rebuilt using Java 8.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Overall, &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20and%20fixVersion%20%3D%201.5.2.Final&quot;&gt;2 issues&lt;/a&gt; were fixed for this release. Thanks a lot to all contributors!&lt;/p&gt; &lt;/div&gt;</content><author><name>Jiri Pechanec</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">Let me announce the bugfix release of Debezium 1.5, 1.5.2.Final! This release is a rebuild of 1.5.1.Final using Java 8.</summary></entry><entry><title type="html">Debezium 1.5.1.Final Released</title><link href="https://debezium.io/blog/2021/05/27/debezium-1-5-1-final-released/" rel="alternate" type="text/html" title="Debezium 1.5.1.Final Released"/><published>2021-05-27T00:00:00+00:00</published><updated>2021-05-27T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/05/27/debezium-1-5-1-final-released</id><content type="html" xml:base="https://debezium.io/blog/2021/05/27/debezium-1-5-1-final-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Let me announce the bugfix release of Debezium 1.5, &lt;strong&gt;1.5.1.Final&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release fixes a small set of issues discovered since the original release and few improvements into the documentation.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The two most important fixes in this release are related to the MySQL database history that can get potentially corrupted under an unfavorable set of conditions.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you execute a &lt;code&gt;DROP TABLE&lt;/code&gt; command and the affected table&amp;#8217;s name contains dashes, then the resulting statement cannot be parsed (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3485&quot;&gt;DBZ-3485&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;RENAME TABLE&lt;/code&gt; statements that contains more than one table can be stored incompletely (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3399&quot;&gt;DBZ-3399&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Both issues were introduced during the rewrite of MySQL connector and were not covered by integration tests.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We strongly recommend upgrading to 1.5.1.Final before you hit these issues. If you are already affected, then the easiest way to recover from the error situation is using a new topic (or dropping the old one) for the database history and execute a &lt;code&gt;schema_only_recovery&lt;/code&gt; snapshot. We apologize for the potential inconvenience.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Overall, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3549?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.5.1.Final&quot;&gt;31 issues&lt;/a&gt; were fixed for this release. Thanks a lot to all contributors!&lt;/p&gt; &lt;/div&gt;</content><author><name>Jiri Pechanec</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">Let me announce the bugfix release of Debezium 1.5, 1.5.1.Final! This release fixes a small set of issues discovered since the original release and few improvements into the documentation.</summary></entry><entry><title type="html">Debezium 1.6.0.Beta1 Released</title><link href="https://debezium.io/blog/2021/05/20/debezium-1-6-beta1-released/" rel="alternate" type="text/html" title="Debezium 1.6.0.Beta1 Released"/><published>2021-05-20T00:00:00+00:00</published><updated>2021-05-20T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/05/20/debezium-1-6-beta1-released</id><content type="html" xml:base="https://debezium.io/blog/2021/05/20/debezium-1-6-beta1-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;I&amp;#8217;m pleased to announce the release of Debezium &lt;strong&gt;1.6.0.Beta1&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release introduces incremental snapshot support for SQL Server and Db2, performance improvements for SQL Server, support for BLOB/CLOB for Oracle, and much more. Lets take a few moments and explore some of these new features in the following.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;incremental_snapshotting_sql_server_db2&quot;&gt;Incremental Snapshotting - SQL Server / Db2&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Debezium first introduced incremental snapshotting in 1.6.0.Alpha1. As discussed in this &lt;a href=&quot;https://debezium.io/blog/2021/05/06/debezium-1-6-alpha1-released/&quot;&gt;blog post&lt;/a&gt;, there are several pain points that exist when running Debezium:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;the necessity to execute consistent snapshots before streaming has begun upon connector restarts&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;inability to trigger full or even partial snapshots after having the connector running for extended periods of time&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With this release, this feature has been extended to both the SQL Server and Db2 connectors. We intend to continue to roll this feature out to additional connectors in future releases.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;If you would like to try the feature yourself then you need to&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;provide a &lt;a href=&quot;https://debezium.io/documentation/reference/1.6/configuration/signalling.html#_overview&quot;&gt;signalling table&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;trigger an ad-hoc incremental snapshot by using a SQL command like&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;INSERT INTO myschema.debezium_signal VALUES('ad-hoc-1', 'execute-snapshot', '{&quot;data-collections&quot;: [&quot;schema1.table1&quot;, &quot;schema1.table2&quot;]}')&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;sql_server_performance_improvement&quot;&gt;SQL Server Performance Improvement&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The SQL Server connector option, &lt;code&gt;source.timestamp.mode&lt;/code&gt;, controls how the timestamp for an emitted event is resolved. The default &lt;code&gt;commit&lt;/code&gt; setting is designed to resolve the timestamp based on when the change record was committed in the database. It was identified that this method used separate JDBC calls to resolve the timestamp for an event, which caused a loss in both performance and throughput.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release fixes the &lt;code&gt;commit&lt;/code&gt; mode performance problem by moving where the timestamp is resolved. This substantially increases the connector&amp;#8217;s performance and throughput while maintaining existing functionality.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We would like to thank &lt;a href=&quot;https://github.com/morozov&quot;&gt;Sergei Morozov&lt;/a&gt; for identifying and contributing a solution to this problem.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;oracle_large_object_data_types&quot;&gt;Oracle Large Object Data Types&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In the era of &quot;Big Data&quot;, its not all that uncommon to use data types such as &lt;code&gt;BLOB&lt;/code&gt; and &lt;code&gt;CLOB&lt;/code&gt; to store large object data. The Debezium Oracle connector has supported a wide range of data types and we&amp;#8217;re happy to report that we&amp;#8217;ve now extended that support to cover large both BLOB and CLOB for both the XStream and LogMiner based implementations.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;When emitting events that contain &lt;code&gt;BLOB&lt;/code&gt; or &lt;code&gt;CLOB&lt;/code&gt; data, the memory footprint of the connector as well as the emitted event&amp;#8217;s message size will be directly impacted by the size of the large object data. As a result, the connector&amp;#8217;s JVM process may require additional memory as well as adjusting some Kafka configurations, such as &lt;code&gt;message.max.bytes&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We encourage the community to test drive the support for these new data types and report any and all feedback.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;other_features&quot;&gt;Other Features&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Further fixes and improvements in this release include the following:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The Debezium connector for Oracle now supports &lt;code&gt;ALTER TABLE&lt;/code&gt; and &lt;code&gt;DROP TABLE&lt;/code&gt; automatically (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2916&quot;&gt;DBZ-2916&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Debezium connector for Oracle is tested and validated using ojdbc.jar version 21.1.0.0 (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3460&quot;&gt;DBZ-3460&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Debezium connector for MonogDB could lead to lost change events where a long running snapshot was greater than the configured oplog window (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3331&quot;&gt;DBZ-3331&lt;/a&gt;); the connector now validates the oplog position&amp;#8217;s existance when streaming starts&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Debezium connector for Cassandra was not responding to schema changes correctly (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3417&quot;&gt;DBZ-3417&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Altogether, a total of &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.6.0.Beta1%20ORDER%20BY%20component%20ASC&quot;&gt;52 issues&lt;/a&gt; have been addressed for this release.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As always, a big thank you to all the community members who contributed: &lt;a href=&quot;https://github.com/Alfusainey&quot;&gt;Alfusainey Jallow&lt;/a&gt;, &lt;a href=&quot;https://github.com/bingqinzhou&quot;&gt;Bingqin Zhou&lt;/a&gt;, &lt;a href=&quot;https://github.com/CaoManhDat&quot;&gt;Cao Manh Dat&lt;/a&gt;, &lt;a href=&quot;https://github.com/johnjmartin&quot;&gt;John Martin&lt;/a&gt;, &lt;a href=&quot;https://github.com/shiawu&quot;&gt;John Wu&lt;/a&gt;, &lt;a href=&quot;https://github.com/truman303&quot;&gt;Mike&lt;/a&gt;, &lt;a href=&quot;https://github.com/ojacquemart&quot;&gt;Olivier Jacquemart&lt;/a&gt;, &lt;a href=&quot;https://github.com/morozov&quot;&gt;Sergei Morozov&lt;/a&gt;, &lt;a href=&quot;https://github.com/siufay325&quot;&gt;SiuFay&lt;/a&gt;, &lt;a href=&quot;https://github.com/smiklosovic&quot;&gt;Stefan Miklosovic&lt;/a&gt;, &lt;a href=&quot;https://github.com/TAregger&quot;&gt;Thomas Aregger&lt;/a&gt;, and &lt;a href=&quot;https://github.com/ramanenka&quot;&gt;Vadzim Ramanenka&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">I&amp;#8217;m pleased to announce the release of Debezium 1.6.0.Beta1! This release introduces incremental snapshot support for SQL Server and Db2, performance improvements for SQL Server, support for BLOB/CLOB for Oracle, and much more. Lets take a few moments and explore some of these new features in the following.</summary></entry><entry><title type="html">Debezium 1.6.0.Alpha1 Released</title><link href="https://debezium.io/blog/2021/05/06/debezium-1-6-alpha1-released/" rel="alternate" type="text/html" title="Debezium 1.6.0.Alpha1 Released"/><published>2021-05-06T00:00:00+00:00</published><updated>2021-05-06T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/05/06/debezium-1-6-alpha1-released</id><content type="html" xml:base="https://debezium.io/blog/2021/05/06/debezium-1-6-alpha1-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;It&amp;#8217;s my pleasure to announce the first release of the Debezium 1.6 series, &lt;strong&gt;1.6.0.Alpha1&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release brings the brand new feature called incremental snapshots for MySQL and PostgreSQL connectors, a Kafka sink for Debezium Server, as well as a wide range of bug fixes and other small feature additions.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;incremental_snapshotting&quot;&gt;Incremental Snapshotting&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Running Debezium exhibits few pain-points&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;the necessity to execute consistent snapshot before streaming is started upon new connector restart&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;inability to trigger full or partial snapshot after having connector to be running for some time&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Starting this release we are deploying the solution to both these potential pitfalls.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The simpler one - an ability to trigger the snapshot during the runtime is solved by &lt;strong&gt;ad-hoc snapshots&lt;/strong&gt;. The user can trigger a snapshot anytime during the streaming phase by sending an &lt;code&gt;execute-snapshot&lt;/code&gt; &lt;a href=&quot;https://debezium.io/documentation/reference/1.6/configuration/signalling.html&quot;&gt;signal&lt;/a&gt; to Debezium with the list of tables to be snapshotted and the type of the snapshot to be used (only &lt;code&gt;incremental&lt;/code&gt; is supported right now, see below). When Debezium receives the signal it will execute the snapshot of the requested tables.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The more complex part that goes hand-in-hand with ad-hoc snapshotting is &lt;strong&gt;incremental snapshots&lt;/strong&gt;. This feature allows the user to execute a snapshot of a set of tables during the streaming phase without interrupting the streaming. Moreover, contrary to the initial snapshot, the snapshot will resume upon connector restart and does not need to start from scratch again.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The implementation of this feature is based on a novel approach to snapshotting originally invented by &lt;a href=&quot;https://arxiv.org/pdf/2010.12597v1.pdf&quot;&gt;DBLog Framework&lt;/a&gt;. Debezium implementation is described in more detail in the &lt;a href=&quot;https://github.com/debezium/debezium-design-documents/blob/main/DDD-3.md&quot;&gt;design document&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;If you want to try the feature yourself then you need to&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;provide a &lt;a href=&quot;https://debezium.io/documentation/reference/1.6/configuration/signalling.html#_overview&quot;&gt;signalling table&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;trigger an ad-hoc incremental snapshot by using SQL command like&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;INSERT INTO myschema.debezium_signal VALUES('ad-hoc-1', 'execute-snapshot', '{&quot;data-collections&quot;: [&quot;schema1.table1&quot;, &quot;schema1.table2&quot;]}')&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;kafka_sink_for_debezium_server&quot;&gt;Kafka Sink for Debezium Server&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Debezium connectors can either run in Kafka Connect or can be deployed using &lt;a href=&quot;https://debezium.io/documentation/reference/1.6/operations/debezium-server.html&quot;&gt;Debezium Server&lt;/a&gt; that provides different destination sinks. Starting with this release if a sink is Apache Kafka it is no longer necessary to use Kafka Connect but Debezium Server with &lt;a href=&quot;https://debezium.io/documentation/reference/1.6/operations/debezium-server.html#_apache_kafka&quot;&gt;Apache Kafka Sink&lt;/a&gt; could be used instead which may simplify operational requirements for some deployments. In this case, the regular Apache Kafka client API is used.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Altogether, &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.5.0.Alpha1%20ORDER%20BY%20component%20ASC&quot;&gt;47 issues&lt;/a&gt; were fixed for this release. A big thank you goes out to all the community members who contributed: &lt;a href=&quot;https://github.com/Alfusainey&quot;&gt;Alfusainey Jallow&lt;/a&gt;, &lt;a href=&quot;https://github.com/bingqinzhou&quot;&gt;Bingqin Zhou&lt;/a&gt;, &lt;a href=&quot;https://github.com/blcksrx&quot;&gt;Hossein Torabi&lt;/a&gt;, &lt;a href=&quot;https://github.com/kyleyj&quot;&gt;Kyley Jex&lt;/a&gt;, &lt;a href=&quot;https://github.com/mpermar&quot;&gt;Martín Pérez&lt;/a&gt;, &lt;a href=&quot;https://github.com/patrichu-cisco&quot;&gt;Patrick Chu&lt;/a&gt;, &lt;a href=&quot;https://github.com/raphaelauv&quot;&gt;Raphael Auv&lt;/a&gt;, &lt;a href=&quot;https://github.com/tommyk-gears&quot;&gt;Tommy Karlsson&lt;/a&gt;, &lt;a href=&quot;https://github.com/elgca&quot;&gt;WenChao Ke&lt;/a&gt;, and &lt;a href=&quot;https://github.com/jjiey&quot;&gt;yangsanity&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;For the upcoming 1.6 preview releases, we&amp;#8217;re planning to focus on completing the follow-up task for incremental snapshotting and provide the support for SQL Server and Db2 connectors too, further improving the LogMiner-based connector implementation for Oracle mainly related to schema evolutions and LOB support.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Jiri Pechanec</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">It&amp;#8217;s my pleasure to announce the first release of the Debezium 1.6 series, 1.6.0.Alpha1! This release brings the brand new feature called incremental snapshots for MySQL and PostgreSQL connectors, a Kafka sink for Debezium Server, as well as a wide range of bug fixes and other small feature additions.</summary></entry><entry><title type="html">Debezium 1.5.0.Final Released</title><link href="https://debezium.io/blog/2021/04/08/debezium-1-5-final-released/" rel="alternate" type="text/html" title="Debezium 1.5.0.Final Released"/><published>2021-04-08T00:00:00+00:00</published><updated>2021-04-08T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/04/08/debezium-1-5-final-released</id><content type="html" xml:base="https://debezium.io/blog/2021/04/08/debezium-1-5-final-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;I&amp;#8217;m thrilled to announce the release of Debezium &lt;strong&gt;1.5.0.Final&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With Debezium 1.5, the LogMiner-based &lt;a href=&quot;/documentation/reference/1.5/connectors/oracle.html&quot;&gt;CDC implementation for Oracle&lt;/a&gt; moves from Incubating to Stable state, and there&amp;#8217;s a brand-new implementation of the MySQL connector, which brings features like &lt;a href=&quot;/documentation/reference/1.5/connectors/mysql.html#mysql-transaction-metadata&quot;&gt;transaction metadata support&lt;/a&gt;. Other key features include support for a new &quot;signalling table&quot;, which for instance can be used to implement &lt;a href=&quot;/documentation/reference/1.5/connectors/oracle.html#surrogate-schema-evolution&quot;&gt;schema changes&lt;/a&gt; with the Oracle connector, and support for &lt;code&gt;TRUNCATE&lt;/code&gt; events with Postgres. There&amp;#8217;s also many improvements to the community-led connectors for &lt;a href=&quot;/documentation/reference/1.5/connectors/vitess.html&quot;&gt;Vitess&lt;/a&gt; and &lt;a href=&quot;/documentation/reference/1.5/connectors/cassandra.html&quot;&gt;Apache Cassandra&lt;/a&gt;, as well as wide range of bug fixes and other smaller improvements.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Across all the 1.5 preview and the final releases, a grand total of &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20in%20(1.5.0.Alpha1%2C%201.5.0.Beta1%2C%201.5.0.Beta2%2C%201.5.0.CR1%2C%201.5.0.Final)&quot;&gt;236 issues&lt;/a&gt; has been addressed.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;For more details, please see the earlier announcements for the &lt;a href=&quot;/blog/2021/02/08/debezium-1-5-alpha1-released/&quot;&gt;1.5.0 Alpha1&lt;/a&gt;, &lt;a href=&quot;/blog/2021/02/24/debezium-1-5-beta1-released/&quot;&gt;Beta1&lt;/a&gt;, &lt;a href=&quot;/blog/2021/03/15/debezium-1-5-beta2-released/&quot;&gt;Beta2&lt;/a&gt;, and &lt;a href=&quot;/blog/2021/03/24/debezium-1-5-cr1-released/&quot;&gt;CR1&lt;/a&gt; releases.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Since the CR1 release, we&amp;#8217;ve primarily focused on documentation improvements and some bug fixes. But there are two last-minute feature additions, too:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;/documentation/reference/1.5/operations/debezium-server.html#_redis_stream&quot;&gt;Support for Redis Streams&lt;/a&gt; in Debezium Server (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2879&quot;&gt;DBZ-2879&lt;/a&gt;), allowing to propagate Debezium data change events into &lt;a href=&quot;https://redis.io/topics/streams-intro&quot;&gt;Redis-based logs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Provide LSN coordinates as standardized sequence field in Postgres change events (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2911&quot;&gt;DBZ-2911&lt;/a&gt;), allowing consumers to identify duplicated events and exclude them from processing, for instance after an un-clean connector shut-down; this field will be added to the &lt;code&gt;source&lt;/code&gt; block of other connectors going forward, too&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Please refer to the &lt;a href=&quot;/releases/1.5/release-notes#release-1.5.0-final&quot;&gt;release notes&lt;/a&gt; of Debezium 1.5.0.Final for the complete list of resolved issues as well as procedures for upgrading to earlier versions.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As always, a big thank you to all the members from the community who helped with this release, be it via code contributions, bug report, testing, providing insight and expertise, etc. In particular for the LogMiner-based CDC implementation for Oracle, we&amp;#8217;ve received a huge number of contributions of all kinds. We&amp;#8217;re deeply grateful for that and look forward a lot to further grow and improve this connector implementation! Kudos to the following individuals from the community which contributed to Debezium 1.5, bringing the &lt;a href=&quot;https://github.com/debezium/debezium/graphs/contributors&quot;&gt;overall number&lt;/a&gt; of contributors to the Debezium core repository to 253:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/adhaamehab&quot;&gt;Adhaam Ehab&lt;/a&gt;, &lt;a href=&quot;https://github.com/ahmedjami&quot;&gt;Ahmed Eljami&lt;/a&gt;, &lt;a href=&quot;https://github.com/bingqinzhou&quot;&gt;Bingqin Zhou&lt;/a&gt;, &lt;a href=&quot;https://github.com/davecramer&quot;&gt;Dave Cramer&lt;/a&gt;, &lt;a href=&quot;https://github.com/ddseapy&quot;&gt;David Seapy&lt;/a&gt;, &lt;a href=&quot;https://github.com/fahimfarookme&quot;&gt;Fahim Farook&lt;/a&gt;, &lt;a href=&quot;https://github.com/frankkoornstra&quot;&gt;Frank Koornstra&lt;/a&gt;, &lt;a href=&quot;https://github.com/rgannu&quot;&gt;Ganesh Ramasubramanian&lt;/a&gt;, &lt;a href=&quot;https://github.com/harveyyue&quot;&gt;Harvey Yue&lt;/a&gt;, &lt;a href=&quot;https://github.com/vanhoale&quot;&gt;Hoa Le&lt;/a&gt;, &lt;a href=&quot;https://github.com/JeremyVigny&quot;&gt;Jeremy Vigny&lt;/a&gt;. &lt;a href=&quot;https://github.com/keweishang&quot;&gt;Kewei Shang&lt;/a&gt;, &lt;a href=&quot;https://github.com/kppullin&quot;&gt;Kevin Pullin&lt;/a&gt;, &lt;a href=&quot;https://github.com/mpermar&quot;&gt;Martín Pérez&lt;/a&gt;, &lt;a href=&quot;https://github.com/msillence&quot;&gt;Martin Sillence&lt;/a&gt;, &lt;a href=&quot;https://github.com/mengqiu&quot;&gt;Meng Qiu&lt;/a&gt;, &lt;a href=&quot;https://github.com/michaelcizmar&quot;&gt;Michael Cizmar&lt;/a&gt;, &lt;a href=&quot;https://github.com/krnaveen14&quot;&gt;Naveen Kumar&lt;/a&gt;, &lt;a href=&quot;https://github.com/pkpfr&quot;&gt;Nick Murray&lt;/a&gt;, &lt;a href=&quot;https://github.com/nitin456&quot;&gt;Nitin Agarwal&lt;/a&gt;, &lt;a href=&quot;https://github.com/r-ballard&quot;&gt;Russell Ballard&lt;/a&gt;, &lt;a href=&quot;https://github.com/mrshanepaul&quot;&gt;Shane Paul&lt;/a&gt;, &lt;a href=&quot;https://github.com/tprelle&quot;&gt;Thomas Prelle&lt;/a&gt;, &lt;a href=&quot;https://github.com/twthorn&quot;&gt;Thomas Thornton&lt;/a&gt;, &lt;a href=&quot;https://github.com/denisprog&quot;&gt;Victar Malinouski&lt;/a&gt;, &lt;a href=&quot;https://github.com/vaosinbi&quot;&gt;Vladimir Osin&lt;/a&gt;, &lt;a href=&quot;https://github.com/Cyril-Engels&quot;&gt;Yilong Chang&lt;/a&gt;, and &lt;a href=&quot;https://github.com/fuxiao224&quot;&gt;Xiao Fu&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;outlook&quot;&gt;Outlook&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Following our quarterly release cadence, Debezium 1.6 is planned for the end of June. A key issue we&amp;#8217;re planning to work on for this version is explorations of how to improve the notion of initial snapshots, where we plan to touch on topics like resumeability, parallelization, changes of filter configuration, and more. This is going to be an open-ended investigation, but we hope to have at least a proof-of-concept implementation for some of these features, which constantly show up high on the wish list of Debezium users.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Another focus area will again be the Debezium connector for Oracle, where we have planned several functional and performance improvements. We are also discussing to move to Java 11 as a minimum baseline for running Debezium. This is primarily caused by external dependencies which are moving on from Java 8. In case you have specific questions or potential concerns around this change, please chime into &lt;a href=&quot;https://groups.google.com/g/debezium/c/ZVOYm_S3Jk4&quot;&gt;the discussion&lt;/a&gt;. Also, if you got specific feature requests or other input for the roadmap and future releases, please let us know via the &lt;a href=&quot;https://groups.google.com/g/debezium&quot;&gt;mailing list&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Gunnar Morling</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">I&amp;#8217;m thrilled to announce the release of Debezium 1.5.0.Final! With Debezium 1.5, the LogMiner-based CDC implementation for Oracle moves from Incubating to Stable state, and there&amp;#8217;s a brand-new implementation of the MySQL connector, which brings features like transaction metadata support. Other key features include support for a new &quot;signalling table&quot;, which for instance can be used to implement schema changes with the Oracle connector, and support for TRUNCATE events with Postgres. There&amp;#8217;s also many improvements to the community-led connectors for Vitess and Apache Cassandra, as well as wide range of bug fixes and other smaller improvements.</summary></entry><entry><title type="html">Debezium 1.5.0.CR1 Released</title><link href="https://debezium.io/blog/2021/03/24/debezium-1-5-cr1-released/" rel="alternate" type="text/html" title="Debezium 1.5.0.CR1 Released"/><published>2021-03-24T00:00:00+00:00</published><updated>2021-03-24T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/03/24/debezium-1-5-cr1-released</id><content type="html" xml:base="https://debezium.io/blog/2021/03/24/debezium-1-5-cr1-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;It&amp;#8217;s my pleasure to announce the release of Debezium &lt;strong&gt;1.5.0.CR1&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As we begin moving toward finalizing the Debezium 1.5 release stream, the Oracle connector has been promoted to stable and there were some TLS improvements for the Cassandra connector, as well as numerous bugfixes. Overall, &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.5.0.CR1%20ORDER%20BY%20issuetype%20DESC&amp;amp;startIndex=20&quot;&gt;50 issues&lt;/a&gt; have been addressed for this release.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;oracle_connector_now_stable&quot;&gt;Oracle connector now stable&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Oracle connector has been in incubating status for a while but recent efforts have helped to bring new features and stability to the connector. We felt at this point, the connector is ready so with this release we&amp;#8217;re officially promoting the Oracle connector from &lt;em&gt;incubating&lt;/em&gt; to &lt;strong&gt;stable&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;A tremendous effort by the community has made all this possible. The numerous contributions, bug reports, and testing has helped so much! The team and I cannot thank the community enough for all its insight, help, and dedication in making this milestone a reality so quickly!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;cassandra_connector_tls_improvements&quot;&gt;Cassandra connector TLS improvements&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Cassandra connector uses the defaut available ciphers to establish SSL connections. For most use cases, this is more than satisfactory; however it does prevent the use of non-standard ciphers. In this release, the Cassandra connector property file can be configured to specify a list of ciphers in precedence order for use.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;To use this new feature, add a line to the connector&amp;#8217;s property file like below:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;cipherSuites=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;A number of bugs were fixed in this release, e.g.:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Debezium logs &quot;is not a valid Avro schema name&quot; can be too verbose &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-2511&quot;&gt;DBZ-2511&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;message.key.columns Regex Validation Time Complexity &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-2957&quot;&gt;DBZ-2957&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;OID values don&amp;#8217;t fit to INT32 schema &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3033&quot;&gt;DBZ-3033&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Connector automatically restart on ORA-26653 &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3236&quot;&gt;DBZ-3236&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;UI container has no assets (JS artifacts, fonts, etc) and randomly fails building &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3247&quot;&gt;DBZ-3247&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Revert Clob behavior for Oracle LogMiner to avoid null values &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3257&quot;&gt;DBZ-3257&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;SQL Server misses description for decimal.handling.mode &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3267&quot;&gt;DBZ-3267&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Oracle connector ignores time.precision.mode and just uses adaptive mode &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3268&quot;&gt;DBZ-3268&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;commons-logging JAR is missing from Debezium Server distro &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3277&quot;&gt;DBZ-3277&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;MongoDB timeouts crash the whole connector &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3278&quot;&gt;DBZ-3278&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Prefer archive logs over redo logs of the same SCN range &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3292&quot;&gt;DBZ-3292&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;LogMiner mining query may unintentionally skip records &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3295&quot;&gt;DBZ-3295&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;IndexOutOfBoundsException when LogMiner DML update statement contains a function as last column&amp;#8217;s value &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3305&quot;&gt;DBZ-3305&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Out of memory with mysql snapshots (regression of DBZ-94 &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3309&quot;&gt;DBZ-3309&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Keyword ORDER is a valid identifier in MySQL grammar &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3310&quot;&gt;DBZ-3310&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;DDL statement couldn&amp;#8217;t be parsed for ROW_FORMAT=TOKUDB_QUICKLZ &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3311&quot;&gt;DBZ-3311&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;LogMiner can miss a log switch event if too many switches occur. &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3319&quot;&gt;DBZ-3319&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Function MOD is missing from MySQL grammar &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3333&quot;&gt;DBZ-3333&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Incorrect SR label names in OCP testusite &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3336&quot;&gt;DBZ-3336&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;DB2 upstream tests are still using master as the default branch &lt;a href=&quot;https://issues.jboss.org/browse/DBZ-3337&quot;&gt;DBZ-3337&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As always, please refer to the &lt;a href=&quot;/releases/1.5/release-notes/#release-1.5.0-cr1&quot;&gt;release notes&lt;/a&gt; for the complete list of resolved issues as well as procedures for upgrading to earlier Debezium versions.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;A big thank you to all the contributors from the community who worked on this release: &lt;a href=&quot;https://github.com/frankkoornstra&quot;&gt;Frank Koornstra&lt;/a&gt; and &lt;a href=&quot;https://github.com/JeremyVigny&quot;&gt;Jeremy Vigny&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;outlook&quot;&gt;Outlook&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As we begin to wrap up Debezium 1.5 and barring any unforeseen regressions or bug reports, we expect Debezium 1.5 Final to be released by the end of March. Once 1.5 Final is out, we&amp;#8217;ll begin our focus toward 1.6. We have quite a bit in store for Debezium 1.6 so stay tuned to learn what is lurking just around the corner!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">It&amp;#8217;s my pleasure to announce the release of Debezium 1.5.0.CR1! As we begin moving toward finalizing the Debezium 1.5 release stream, the Oracle connector has been promoted to stable and there were some TLS improvements for the Cassandra connector, as well as numerous bugfixes. Overall, 50 issues have been addressed for this release.</summary></entry><entry><title type="html">Understanding Non-Key Joins With the Quarkus Extension for Kafka Streams</title><link href="https://debezium.io/blog/2021/03/18/understanding-non-key-joins-with-quarkus-extension-for-kafka-streams/" rel="alternate" type="text/html" title="Understanding Non-Key Joins With the Quarkus Extension for Kafka Streams"/><published>2021-03-18T00:00:00+00:00</published><updated>2021-03-18T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/03/18/understanding-non-key-joins-with-quarkus-extension-for-kafka-streams</id><content type="html" xml:base="https://debezium.io/blog/2021/03/18/understanding-non-key-joins-with-quarkus-extension-for-kafka-streams/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/documentation/streams/&quot;&gt;Kafka Streams&lt;/a&gt; is a library for developing stream processing applications based on Apache Kafka. Quoting its docs, &quot;a Kafka Streams application processes record streams through a topology in real-time, processing data continuously, concurrently, and in a record-by-record manner&quot;. The Kafka Streams DSL provides a range of stream processing operations such as a map, filter, join, and aggregate.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;non_key_joins_in_kafka_streams&quot;&gt;Non-Key Joins in Kafka Streams&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Debezium’s CDC source connectors make it easy to capture data changes in databases and push them towards sink systems such as Elasticsearch in near real-time. By default, this results in a 1:1 relationship between tables in the source database, the corresponding Kafka topics, and a representation of the data at the sink side, such as a search index in Elasticsearch.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In case of 1:n relationships, say between a table of customers and a table of addresses, consumers often are interested in a view of the data that is a single, nested data structure, e.g. a single Elasticsearch document representing a customer and all their addresses.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This is where &lt;a href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/KIP-213+Support+non-key+joining+in+KTable&quot;&gt;KIP-213&lt;/a&gt; (&quot;Kafka Improvement Proposal&quot;) and its foreign key joining capabilities come in: it was introduced in &lt;a href=&quot;https://kafka.apache.org&quot;&gt;Apache Kafka&lt;/a&gt; 2.4 &quot;to close the gap between the semantics of KTables in streams and tables in relational databases&quot;. Before KIP-213, in order to join messages from two Debezium change event topics, you&amp;#8217;d typically have to manually re-key at least one of the topics, so to make sure the same key is used on both sides of the join.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Thanks to KIP-213, this isn&amp;#8217;t needed any longer, as it allows to join two Kafka topics on fields extracted from the Kafka message value, taking care of the required re-keying automatically, in a fully transparent way. Comparing to &lt;a href=&quot;/blog/2018/03/08/creating-ddd-aggregates-with-debezium-and-kafka-streams/&quot;&gt;previous approaches&lt;/a&gt;, this drastically reduces the effort for creating aggregated events from Debezium’s CDC events.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Non-key joins or rather &lt;a href=&quot;https://kafka.apache.org/27/documentation/streams/developer-guide/dsl-api.html#ktable-ktable-fk-join&quot;&gt;foreign-key joins&lt;/a&gt; are analogous to joins in SQL such as the following:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;class&quot;&gt;SELECT&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; CUSTOMER &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; ADDRESS &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; CUSTOMER.ID = ADDRESS.CUSTOMER_ID&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In Kafka Streams terms, the output of such join is a new &lt;code&gt;KTable&lt;/code&gt; containing the join result.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;database_overview&quot;&gt;Database Overview&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Sticking to our earlier example of customers and address, let&amp;#8217;s consider an application with the following data model:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;imageblock centered-image&quot;&gt; &lt;img src=&quot;/assets/images/kstreams_db_diagram.jpg&quot; class=&quot;responsive-image&quot; alt=&quot;Database Overview&quot;&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The two entities, customer and address, share a foreign key relationship from address to customer, i.e. a customer can have multiple addresses. As stated above, by default Debezium will emit events for each table on distinct topics. Using Kafka Streams, the change event topics for both tables will be loaded into two &lt;code&gt;KTable&lt;/code&gt;s, which are joined on the customer id. The Kafka Streams application is going to process data from the two Kafka topics. Whenever there&amp;#8217;s a new CDC event on either topic&amp;#8201;&amp;#8212;&amp;#8201;triggered by the insertion, update, or deletion of a record&amp;#8201;&amp;#8212;&amp;#8201;the join will be re-executed.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As a runtime for the Kafka Streams application, we&amp;#8217;re going to use &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt;, a stack for building cloud-native microservices, which (amongst many others) also provides an &lt;a href=&quot;https://quarkus.io/guides/kafka-streams&quot;&gt;extension&lt;/a&gt; for Kafka Streams. While it&amp;#8217;s general possible to run a Kafka Streams topology via a plain &lt;code&gt;main()&lt;/code&gt; method, using Quarkus and this extension as a foundation has a number of advantages:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Management of the topology (e.g. waiting for all input topics to be created)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Configurability via environment variables, system properties etc.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Exposing health checks&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Exposing metrics&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;Dev Mode&lt;/em&gt;, a way of working on the stream topology with automatic hot code replacement after code changes&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Support for executing the Kafka Streams pipeline as a native binary via &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt;, resulting in a signficantly reduced memory consumption and start-up times&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;imageblock centered-image&quot;&gt; &lt;img src=&quot;/assets/images/kstreams_change_event_overview.png&quot; class=&quot;responsive-image&quot; alt=&quot;Change Event Overview&quot;&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This picture shows an overview of our solution.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;creating_an_application_using_the_quarkus_kafka_streams_extension&quot;&gt;Creating an Application using the Quarkus Kafka Streams Extension&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;To create a new Quarkus project with the Kafka Streams extension, run the following:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre&gt;mvn io.quarkus:quarkus-maven-plugin:1.12.2.Final:create \ -DprojectGroupId=org.acme \ -DprojectArtifactId=customer-addresses-aggregator \ -Dextensions=&quot;kafka-streams&quot; cd customer-addresses-aggregator&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect2&quot;&gt; &lt;h3 id=&quot;understanding_the_stream_processing_topology&quot;&gt;Understanding the Stream Processing Topology&lt;/h3&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We have an aggregator application that will read from the two Kafka topics and process them in a streaming pipeline:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;the two topics are joined on customer id&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;each customer is enriched with its addresses&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;this aggregated data is written out to a third topic, &lt;code&gt;customersWithAddressesTopic&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;When using the Quarkus extension for Kafka Streams, all we need to do for that is to declare a &lt;a href=&quot;http://www.cdi-spec.org/&quot;&gt;CDI producer method&lt;/a&gt;, which returns the topology of our stream processing application. This method must be annotated with &lt;code&gt;@Produces&lt;/code&gt;, and it must return a &lt;code&gt;Topology&lt;/code&gt; instance. The Quarkus extension is responsible for configuring, starting, and stopping the Kafka Streams engine. Now let&amp;#8217;s take a look at the actual streaming query implementation itself.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@ApplicationScoped&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;TopologyProducer&lt;/span&gt; { &lt;span class=&quot;annotation&quot;&gt;@ConfigProperty&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;customers.topic&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; customersTopic; &lt;span class=&quot;annotation&quot;&gt;@ConfigProperty&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;addresses.topic&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; addressesTopic; &lt;span class=&quot;annotation&quot;&gt;@ConfigProperty&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;customers.with.addresses.topic&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; customersWithAddressesTopic; &lt;span class=&quot;annotation&quot;&gt;@Produces&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; Topology buildTopology() { StreamsBuilder builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StreamsBuilder(); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt; Serde&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt;&amp;gt; adressKeySerde = DebeziumSerdes.payloadJson(&lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt;.class); adressKeySerde.configure(&lt;span class=&quot;predefined-type&quot;&gt;Collections&lt;/span&gt;.emptyMap(), &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;); Serde&amp;lt;Address&amp;gt; addressSerde = DebeziumSerdes.payloadJson(Address.class); addressSerde.configure(&lt;span class=&quot;predefined-type&quot;&gt;Collections&lt;/span&gt;.singletonMap(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;from.field&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;), &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;); Serde&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Integer&lt;/span&gt;&amp;gt; customersKeySerde = DebeziumSerdes.payloadJson(&lt;span class=&quot;predefined-type&quot;&gt;Integer&lt;/span&gt;.class); customersKeySerde.configure(&lt;span class=&quot;predefined-type&quot;&gt;Collections&lt;/span&gt;.emptyMap(), &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;); Serde&amp;lt;Customer&amp;gt; customersSerde = DebeziumSerdes.payloadJson(Customer.class); customersSerde.configure(&lt;span class=&quot;predefined-type&quot;&gt;Collections&lt;/span&gt;.singletonMap(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;from.field&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;), &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;); JsonbSerde&amp;lt;AddressAndCustomer&amp;gt; addressAndCustomerSerde = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JsonbSerde&amp;lt;&amp;gt;(AddressAndCustomer.class); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt; JsonbSerde&amp;lt;CustomerWithAddresses&amp;gt; customerWithAddressesSerde = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JsonbSerde&amp;lt;&amp;gt;(CustomerWithAddresses.class); KTable&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt;, Address&amp;gt; addresses = builder.table( &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt; addressesTopic, Consumed.with(adressKeySerde, addressSerde) ); KTable&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Integer&lt;/span&gt;, Customer&amp;gt; customers = builder.table( customersTopic, Consumed.with(customersKeySerde, customersSerde) ); KTable&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;Integer&lt;/span&gt;, CustomerWithAddresses&amp;gt; customersWithAddresses = addresses.join( &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt; customers, address -&amp;gt; address.customer_id, AddressAndCustomer::&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;, Materialized.with(Serdes.Long(), addressAndCustomerSerde) ) .groupBy( &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt; (addressId, addressAndCustomer) -&amp;gt; KeyValue.pair( addressAndCustomer.customer.id, addressAndCustomer), Grouped.with(Serdes.Integer(), addressAndCustomerSerde) ) .aggregate( &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt; CustomerWithAddresses::&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;, (customerId, addressAndCustomer, aggregate) -&amp;gt; aggregate.addAddress( addressAndCustomer), (customerId, addressAndCustomer, aggregate) -&amp;gt; aggregate.removeAddress( addressAndCustomer), Materialized.with(Serdes.Integer(), customerWithAddressesSerde) ); customersWithAddresses.toStream() &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt; .to( customersWithAddressesTopic, Produced.with(Serdes.Integer(), customerWithAddressesSerde) ); &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.build(); } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;colist arabic&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The topic names are injected using the &lt;a href=&quot;https://microprofile.io/project/eclipse/microprofile-config&quot;&gt;MicroProfile Config API&lt;/a&gt;, with the values being provided in the Quarkus &lt;code&gt;application.properties&lt;/code&gt; configuration file (they could be overridden using environment variables for instance)&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt; &lt;td&gt;Create an instance of &lt;code&gt;StreamsBuilder&lt;/code&gt;, which helps us to build our topology&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt; &lt;td&gt;For serializing and deserializing Java types used in the streaming pipeline into/from JSON, Quarkus provides the &lt;code&gt;class io.quarkus.kafka.client.serialization.JsonbSerde&lt;/code&gt;; The Serde implementation based is on &lt;a href=&quot;https://github.com/quarkusio/quarkus/blob/master/extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/serialization/JsonbSerde.java&quot;&gt;JSON-B&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;KTable&lt;/code&gt;-&lt;code&gt;KTable&lt;/code&gt; foreign-key join functionality is used to extract the &lt;code&gt;customer#id&lt;/code&gt; and perform the join; &lt;code&gt;StreamsBuilder#table()&lt;/code&gt; is used to read the two Kafka topics into the KTable &lt;code&gt;addresses&lt;/code&gt; and &lt;code&gt;customers&lt;/code&gt;, respectively&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The message from the &lt;code&gt;addresses&lt;/code&gt; topic is joined with the corresponding &lt;code&gt;customers&lt;/code&gt; topic; the join result contains the data of the customer with one of their addresses&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;code&gt;groupBy()&lt;/code&gt; operation will have the records to be grouped by &lt;code&gt;customer#id&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt; &lt;td&gt;To produce the nested structure of one customer and all their addresses, the &lt;code&gt;aggregate()&lt;/code&gt; operation is applied to each group of records (customer-address tuples), updating a &lt;code&gt;CustomerWithAddresses&lt;/code&gt; per customer&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The results of the pipeline are written out to the &lt;code&gt;customersWithAddressesTopic&lt;/code&gt; topic&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The &lt;code&gt;CustomerWithAddresses&lt;/code&gt; class keeps track of the aggregated values while the events are processed in the streaming pipeline.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;CustomerWithAddresses&lt;/span&gt; { &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; Customer customer; &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;List&lt;/span&gt;&amp;lt;Address&amp;gt; addresses = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(); &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; CustomerWithAddresses addAddress(AddressAndCustomer addressAndCustomer) { customer = addressAndCustomer.customer; addresses.add(addressAndCustomer.address); &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;; } &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; CustomerWithAddresses removeAddress(AddressAndCustomer addressAndCustomer) { &lt;span class=&quot;predefined-type&quot;&gt;Iterator&lt;/span&gt;&amp;lt;Address&amp;gt; it = addresses.iterator(); &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (it.hasNext()) { Address a = it.next(); &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (a.id == addressAndCustomer.address.id) { it.remove(); &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;; } } &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;; } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Kafka Streams extension is configured via the Quarkus configuration file &lt;code&gt;application.properties&lt;/code&gt;. Along with the topic names, this file also has the information about the Kafka bootstrap server and several streams options:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;customers.topic=dbserver1.inventory.customers addresses.topic=dbserver1.inventory.addresses customers.with.addresses.topic=customers-with-addresses quarkus.kafka-streams.bootstrap-servers=localhost:9092 quarkus.kafka-streams.application-id=kstreams-fkjoin-aggregator quarkus.kafka-streams.application-server=${hostname}:8080 quarkus.kafka-streams.topics=${customers.topic},${addresses.topic} # streams options kafka-streams.cache.max.bytes.buffering=10240 kafka-streams.commit.interval.ms=1000 kafka-streams.metadata.max.age.ms=500 kafka-streams.auto.offset.reset=earliest kafka-streams.metrics.recording.level=DEBUG kafka-streams.consumer.session.timeout.ms=150 kafka-streams.consumer.heartbeat.interval.ms=100&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;building_and_running_the_application&quot;&gt;Building and Running the Application&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;You can now build the application like so:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre&gt;mvn clean package&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;To run the application and all related components (Kafka, Kafka Connect with Debezium, a Postgres database), we&amp;#8217;ve created a &lt;a href=&quot;https://github.com/debezium/debezium-examples/blob/master/kstreams-fk-join/docker-compose.yaml&quot;&gt;Docker Compose file&lt;/a&gt;, which you can find in the &lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/kstreams-fk-join&quot;&gt;debezium-examples&lt;/a&gt; repo. To launch all the containers, also building the aggregator container image, run the the following:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre&gt;export DEBEZIUM_VERSION=1.4 docker-compose up --build&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;To register the Debezium Connector with Kafka Connect, you need to specify the configuration properties like name of the connector, database hostname, user, password, port, name of the database, etc. Create a file &lt;a href=&quot;https://github.com/debezium/debezium-examples/blob/master/kstreams-fk-join/register-postgres.json&quot;&gt;register-postgres.json&lt;/a&gt; with the following contents:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{ &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;connector.class&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;io.debezium.connector.postgresql.PostgresConnector&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tasks.max&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;database.hostname&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;database.port&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;database.user&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;database.password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;database.dbname&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;database.server.name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dbserver1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;schema.include&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;decimal.handling.mode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;key.converter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.apache.kafka.connect.json.JsonConverter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;key.converter.schemas.enable&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;value.converter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.apache.kafka.connect.json.JsonConverter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;value.converter.schemas.enable&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Configure the Debezium Connector:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre&gt;http PUT http://localhost:8083/connectors/inventory-connector/config &amp;lt; register-postgres.json&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Now run an instance of the &lt;code&gt;debezium/tooling&lt;/code&gt; container image:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre&gt;docker run --tty --rm \ --network kstreams-fk-join-network \ debezium/tooling:1.1 \&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This image provides several useful tools such as &lt;a href=&quot;https://github.com/edenhill/kafkacat&quot;&gt;kafkacat&lt;/a&gt;. Within the tooling container, run kafkacat to examine the results of the streaming pipeline:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre&gt;kafkacat -b kafka:9092 -C -o beginning -q \ -t customers-with-addresses | jq .&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;You should see records like the following, each containing all the data of one customer and all their addresses:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{ &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [ { &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Hamburg&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Canada&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1001&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;100001&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;42 Main Street&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;zipcode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;90210&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; }, { &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Berlin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Canada&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1001&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;100002&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;11 Post Dr.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;zipcode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;90211&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; } ], &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: { &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;sally.thomas@acme.com&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Sally&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1001&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Thomas&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Get a shell for the database, insert, update, or delete some records, and the join will be reprocessed automatically:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;span class=&quot;error&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;:&lt;span class=&quot;float&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;l&lt;/span&gt;:&lt;span class=&quot;error&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;:&lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;:&lt;span class=&quot;integer&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;, &lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;d&lt;/span&gt;: &lt;span class=&quot;error&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;integer&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;running_natively&quot;&gt;Running Natively&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Kafka Streams applications can easily be scaled out i.e. the load is going to be shared amongst multiple instances of the application, each processing a sub-set of the partitions of the input topics. When the Quarkus application gets compiled into native code via GraalVM, it takes considerably less memory and has a very fast start-up time. Without any concern about the memory management, you can start multiple instances of a Kafka Streams pipeline in parallel.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;If you want to run this application in &lt;code&gt;native&lt;/code&gt; mode, set the &lt;code&gt;QUARKUS_MODE&lt;/code&gt; as &lt;code&gt;native&lt;/code&gt; and run the following (make sure to have the required GraalVM tooling installed):&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre&gt;mvn clean package -Pnative&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;To learn more about running Kafka Streams applications as a native binary, please refer to the &lt;a href=&quot;https://quarkus.io/guides/kafka-streams#running-natively&quot;&gt;reference guide&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;more_insights_on_the_kafka_streams_extension&quot;&gt;More Insights on the Kafka Streams Extension&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Quarkus extension can also help you address some of the common requirements when building microservices for stream processing. For running your Kafka Streams application in production, you can for instance easily add health checks and metrics for the data pipeline.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://quarkus.io/guides/microprofile-metrics&quot;&gt;Micrometer Metrics&lt;/a&gt; provides rich metrics about your Quarkus application, i.e. what is happening inside your application by monitoring and what are its performance characteristics. Quarkus lets you expose these metrics via HTTP using a JSON format or the OpenMetrics format. From there, they can be scraped by tools such as &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt; and stored for analysis and visualization.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Once the application is started, the metrics will be exposed under &lt;code&gt;q/metrics&lt;/code&gt;, returning the data in the OpenMetrics format by default:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;# HELP kafka_producer_node_request_total The total number of requests sent # TYPE kafka_producer_node_request_total counter kafka_producer_node_request_total{client_id=&amp;quot;kstreams-fkjoin-aggregator-b4ac1384-0e0a-4f19-8d52-8cc1ee4c6dfe-StreamThread-1-producer&amp;quot;,kafka_version=&amp;quot;2.5.0&amp;quot;,node_id=&amp;quot;node--1&amp;quot;,status=&amp;quot;up&amp;quot;,} 83.0 # HELP kafka_producer_record_send_rate The average number of records sent per second. # TYPE kafka_producer_record_send_rate gauge kafka_producer_record_send_rate{client_id=&amp;quot;kstreams-fkjoin-aggregator-b4ac1384-0e0a-4f19-8d52-8cc1ee4c6dfe-StreamThread-1-producer&amp;quot;,kafka_version=&amp;quot;2.5.0&amp;quot;,status=&amp;quot;up&amp;quot;,} 0.0 # HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the (young) heap memory pool after one GC to before the next # TYPE jvm_gc_memory_allocated_bytes_total counter jvm_gc_memory_allocated_bytes_total 1.1534336E8 # ... # HELP http_requests_total # TYPE http_requests_total counter http_requests_total{status=&amp;quot;up&amp;quot;,uri=&amp;quot;/api/customers&amp;quot;,} 0.0 # ...&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;If you aren’t using Prometheus, you have a few options like Datadog, Stackdriver, and others. For a detailed guide check the &lt;a href=&quot;https://github.com/quarkiverse/quarkus-micrometer-registry&quot;&gt;Quarkiverse Extensions&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;On the other hand, we have &lt;a href=&quot;https://quarkus.io/guides/microprofile-health&quot;&gt;MicroProfile Health&lt;/a&gt; spec, which provides information about the liveness of the application, i.e. signalling whether your application is running or not and whether your application is able to process requests. To monitor the health status of your existing Quarkus application you can add the &lt;code&gt;smallrye-health&lt;/code&gt; extension:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre&gt;mvn quarkus:add-extension -Dextensions=&quot;smallrye-health&quot;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Quarkus will expose all health checks via HTTP under &lt;code&gt;q/health&lt;/code&gt;, which in our case shows the status of the pipeline and any missing topics:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{ &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;checks&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [ { &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Kafka Streams topics health check&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: { &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;missing_topics&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dbserver1.inventory.customers,dbserver1.inventory.addresses&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; } } ] }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Quarkus extension for Kafka Streams comes with everything needed to run stream processing pipelines on the JVM as well as in native mode, along with additional bonuses of performing health checks, metrics, and more. For instance you could quite easily expose REST APIs for interactive queries using the Quarkus REST support, potentially retrieving data from other instances of scaled out Kafka Streams app using the &lt;a href=&quot;https://quarkus.io/guides/rest-client&quot;&gt;MicroProfile REST client API&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In this article we have discussed a stream processing topology of foreign key joins in Kafka Streams, and how to use the Quarkus Kafka Streams extension for running and building your application in JVM mode. You can find the complete &lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/kstreams-fk-join&quot;&gt;source code&lt;/a&gt; of the implementation in the Debezium examples repo. If you got any questions or feedback, please let us know in the comments below. We&amp;#8217;re looking forward to your suggestions!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect2&quot;&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://quarkus.io/guides/kafka-streams&quot;&gt;Building Kafka Streams applications with Quarkus&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/gunnarmorling/change-data-capture-pipelines-with-debezium-and-kafka-streams-jokerconf&quot;&gt;Change Data Capture Pipelines With Debezium and Kafka Streams&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://micrometer.io/docs/concepts&quot;&gt;Micrometer Application Monitor&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Anisha Mohanty</name></author><category term="kafka streams"/><category term="quarkus"/><category term="examples"/><summary type="html">Kafka Streams is a library for developing stream processing applications based on Apache Kafka. Quoting its docs, &quot;a Kafka Streams application processes record streams through a topology in real-time, processing data continuously, concurrently, and in a record-by-record manner&quot;. The Kafka Streams DSL provides a range of stream processing operations such as a map, filter, join, and aggregate. Non-Key Joins in Kafka Streams Debezium’s CDC source connectors make it easy to capture data changes in databases and push them towards sink systems such as Elasticsearch in near real-time. By default, this results in a 1:1 relationship between tables in the source database, the corresponding Kafka topics, and a representation of the data at the sink side, such as a search index in Elasticsearch. In case of 1:n relationships, say between a table of customers and a table of addresses, consumers often are interested in a view of the data that is a single, nested data structure, e.g. a single Elasticsearch document representing a customer and all their addresses. This is where KIP-213 (&quot;Kafka Improvement Proposal&quot;) and its foreign key joining capabilities come in: it was introduced in Apache Kafka 2.4 &quot;to close the gap between the semantics of KTables in streams and tables in relational databases&quot;. Before KIP-213, in order to join messages from two Debezium change event topics, you&amp;#8217;d typically have to manually re-key at least one of the topics, so to make sure the same key is used on both sides of the join. Thanks to KIP-213, this isn&amp;#8217;t needed any longer, as it allows to join two Kafka topics on fields extracted from the Kafka message value, taking care of the required re-keying automatically, in a fully transparent way. Comparing to previous approaches, this drastically reduces the effort for creating aggregated events from Debezium’s CDC events.</summary></entry><entry><title type="html">Debezium 1.5.0.Beta2 Released</title><link href="https://debezium.io/blog/2021/03/15/debezium-1-5-beta2-released/" rel="alternate" type="text/html" title="Debezium 1.5.0.Beta2 Released"/><published>2021-03-15T00:00:00+00:00</published><updated>2021-03-15T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/03/15/debezium-1-5-beta2-released</id><content type="html" xml:base="https://debezium.io/blog/2021/03/15/debezium-1-5-beta2-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We are very happy to announce the release of Debezium &lt;strong&gt;1.5.0.Beta2&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The main features of this release is the new Debezium Signaling Table support, Vitess SET type support, and a continued focus to minor improvements, bugfixes, and polish as we sprint to the finish line for the 1.5 release.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Overall, the community fixed &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.5.0.Beta2%20ORDER%20BY%20issuetype%20DESC&quot;&gt;54 issues&lt;/a&gt; since the Beta1 release, some of which we&amp;#8217;ll explore more in-depth below.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;signaling_table&quot;&gt;Signaling Table&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The signal table feature is a huge milestone for Debezium. It provides a command pattern based on a source database table to send commands (aka signals) to Debezium so that specific actions may be taken. The framework is extendable, allowing a connector to implement custom commands beyond the common commands provided by Debezium core. There are several situations where this might be applicable, including but not limited to, PostgreSQL primary key column changes, changes to enum value-sets of a column definition, and schema changes with the Oracle connector. This is an incubating feature and therefore behavior is subject to change between releases.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In order to use the signal table feature, the connector option &lt;code&gt;signal.data.collection&lt;/code&gt; must be specified in the connector&amp;#8217;s configuration. This option specifies the fully qualified name of the table from which signal requests will be sourced. If this option is not specified or empty, the signal table feature will be disabled.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The signal table itself must be created ahead of time and it must adhere to the following convention:&lt;/p&gt; &lt;/div&gt; &lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt; &lt;colgroup&gt; &lt;col style=&quot;width: 50%;&quot;&gt; &lt;col style=&quot;width: 50%;&quot;&gt; &lt;/colgroup&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Column Name&lt;/th&gt; &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Data Type&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ID&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;STRING&lt;/code&gt;&lt;br&gt; The unique identifier of the signal such as a UUID.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TYPE&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;STRING&lt;/code&gt;&lt;br&gt; The unique command to be performed.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DATA&lt;/p&gt;&lt;/td&gt; &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;STRING&lt;/code&gt;&lt;br&gt; The payload for the command.&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Lastly, the signal table must be explicitly found as part of your connector&amp;#8217;s include/exclude-list specifications. In other words, if you&amp;#8217;re specifying a list of tables to monitor, this list will need to be adjusted to include the name of the signal table as well.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This new feature has quite a number of use cases that we intend to explore in future releases. Lets discuss what signals are currently supported in this release.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect2&quot;&gt; &lt;h3 id=&quot;log_signal&quot;&gt;Log Signal&lt;/h3&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The log signal is detected when the &lt;code&gt;TYPE&lt;/code&gt; column in the signal table is &lt;code&gt;log&lt;/code&gt;. This signal requests that Debezium write the contents of the &lt;code&gt;DATA&lt;/code&gt; column (payload) to the connector logs as-is. This can be useful for a variety of purposes from debugging to tracking progress of database script operations and much more.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As an example:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;class&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;INTO&lt;/span&gt; DEBEZIUM_SIGNALS (ID, TYPE, DATA) &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Hello World&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Once that insert is committed and written to the database&amp;#8217;s transaction logs, Debezium will recognize the signal and will then write &lt;code&gt;Hello World&lt;/code&gt; to the connector logs using the &lt;code&gt;INFO&lt;/code&gt; log level.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect2&quot;&gt; &lt;h3 id=&quot;schema_changes_signal&quot;&gt;Schema Changes Signal&lt;/h3&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The schema changes signal is detected when the &lt;code&gt;TYPE&lt;/code&gt; column in the signal table is &lt;code&gt;schema-changes&lt;/code&gt;. This signal tells Debezium to emit a &lt;code&gt;SchemaChangeEvent&lt;/code&gt; to the schema changes topic that is based on the changes supplied in the row&amp;#8217;s &lt;code&gt;DATA&lt;/code&gt; column (payload). The format of the &lt;code&gt;DATA&lt;/code&gt; column must be given in JSON and an example of the format is below. Additionally, this signal will also have Debezium update it&amp;#8217;s in-memory representation of the table&amp;#8217;s schema structure.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As an example, we have a PostgreSQL table &lt;code&gt;s1.a&lt;/code&gt; where we want to add a new column &lt;code&gt;aa&lt;/code&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{ &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [{ &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ALTER&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;s1.a&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: { &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;defaultCharsetName&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;primaryKeyColumnNames&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [ &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; ], &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [{ &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jdbcType&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nativeType&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;typeName&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;typeExpression&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;serial&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;charsetName&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;autoIncremented&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;generated&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;false&lt;/span&gt; }, { &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;aa&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jdbcType&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nativeType&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;23&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;typeName&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;int4&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;typeExpression&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;int4&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;charsetName&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;autoIncremented&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;generated&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;value&quot;&gt;false&lt;/span&gt; }] } }] }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With this JSON payload, the signal would be inserted as:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;listingblock&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;class&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;INTO&lt;/span&gt; DEBEZIUM_SIGNALS (ID, TYPE, DATA) &lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;schema-changes&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &amp;lt;json-payload-string&amp;gt;);&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;vitess_set_support&quot;&gt;Vitess SET support&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The Vitess team improved the &lt;code&gt;SET&lt;/code&gt; data type support in the VStream API as part of Vitess 9.0. This improvement has lead to the &lt;code&gt;SET&lt;/code&gt; data type now being supported by the Debezium Vitess connector. This data type will be emitted as an &lt;code&gt;EnumSet&lt;/code&gt; that will now contain all the permissible values of the column&amp;#8217;s &lt;code&gt;SET&lt;/code&gt; definition.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;other_features_and_fixes&quot;&gt;Other Features and Fixes&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Besides the Signal Table and Vitess SET support, a few other improvements and fixes found their way into this release.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The Debezium connector for Oracle now uses the LogMiner-based capturing implementation by default. In order to use the XStream-based implementation, the &lt;code&gt;database.connection.adapter&lt;/code&gt; option must be explicitly set to &lt;code&gt;xstream&lt;/code&gt; (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3241&quot;&gt;DBZ-3241&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In an earlier release of Debezium 1.5, the Oracle connector began to emit &lt;code&gt;NUMBER(1)&lt;/code&gt; data types as &lt;code&gt;BOOLEAN&lt;/code&gt;. Rather than this conversion be implicitly done by the connector, this behavior has been moved to an OOTB converter, &lt;code&gt;NumberOneToBooleanConverter&lt;/code&gt;, that can be used as needed (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3208&quot;&gt;DBZ-3208&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;System generated index-organized tables (tables that begin with &lt;code&gt;SYS_IOT_OVER&lt;/code&gt;) are ignored by the Oracle connector (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3036&quot;&gt;DBZ-3036&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Debezium Server&amp;#8217;s sink for AWS Kinesis can be configured with an endpoint by specifying &lt;code&gt;debezium.sink.kinesis.endpoint&lt;/code&gt; (&lt;a href=&quot;https://www.redhat.com/browse/DBZ-3246&quot;&gt;DBZ-3246&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As always, you can find the complete list of all the addressed issues and upgrade procedures in the &lt;a href=&quot;/release/1.5/release-notes/#release-1.5.0-beta2&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Many thanks to all the community members contributing to this release: &lt;a href=&quot;https://github.com/bingqinzhou&quot;&gt;Bingqin Zhou&lt;/a&gt;, &lt;a href=&quot;https://github.com/ddseapy&quot;&gt;David Seapy&lt;/a&gt;, &lt;a href=&quot;https://github.com/denisprog&quot;&gt;Victar Malinouski&lt;/a&gt;, &lt;a href=&quot;https://github.com/fuxiao224&quot;&gt;Xiao Fu&lt;/a&gt;, &lt;a href=&quot;https://github.com/keweishang&quot;&gt;Kewei Shang&lt;/a&gt;, &lt;a href=&quot;https://github.com/mpermar&quot;&gt;Martín Pérez&lt;/a&gt;, &lt;a href=&quot;https://github.com/vanhoale&quot;&gt;Hoa Le&lt;/a&gt;, &lt;a href=&quot;https://github.com/vaosinbi&quot;&gt;Vladimir Osin&lt;/a&gt;, &lt;a href=&quot;https://github.com/martper2&quot;&gt;Martín Pérez&lt;/a&gt;, and &lt;a href=&quot;https://github.com/mengqiu&quot;&gt;Meng Qiu&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;whats_next&quot;&gt;What&amp;#8217;s Next?&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Slowly wrapping up the work on the Debezium 1.5 release train, we&amp;#8217;ve also taken the opportunity and integrated the Debezium Oracle into the main &lt;a href=&quot;https://github.com/debezium/debezium&quot;&gt;debezium&lt;/a&gt; source code repository. With that, all connectors of the former &lt;a href=&quot;https://github.com/debezium/debezium-incubator&quot;&gt;debezium-incubator&lt;/a&gt; respository have either been moved into their own, dedicated repository, or integrated into the main one. The incubator repository has been set to &quot;Archived&quot; mode, allowing to examine its history if needed.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;For the remaining time until 1.5 Final, we&amp;#8217;re planning to focus on bug fixes, performance improvements, documentation adjustments and other stabilization efforts; barring any unforeseen issues, the LogMiner-based capture implementation will be promoted from &lt;em&gt;Incubating&lt;/em&gt; to &lt;em&gt;Stable&lt;/em&gt; state for the Final release, too. If things go as planned, there&amp;#8217;ll be a CR (candidate release) mid next week, followed by the final release around the end of the month.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">We are very happy to announce the release of Debezium 1.5.0.Beta2! The main features of this release is the new Debezium Signaling Table support, Vitess SET type support, and a continued focus to minor improvements, bugfixes, and polish as we sprint to the finish line for the 1.5 release. Overall, the community fixed 54 issues since the Beta1 release, some of which we&amp;#8217;ll explore more in-depth below.</summary></entry><entry><title type="html">Debezium 1.5.0.Beta1 Released</title><link href="https://debezium.io/blog/2021/02/24/debezium-1-5-beta1-released/" rel="alternate" type="text/html" title="Debezium 1.5.0.Beta1 Released"/><published>2021-02-24T00:00:00+00:00</published><updated>2021-02-24T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/02/24/debezium-1-5-beta1-released</id><content type="html" xml:base="https://debezium.io/blog/2021/02/24/debezium-1-5-beta1-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;I&amp;#8217;m very happy to announce the release of Debezium &lt;strong&gt;1.5.0.Beta1&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release adds a brand-new component&amp;#8201;&amp;#8212;&amp;#8201;the web-based Debezium UI --, transaction metadata support for the MySQL connector, a large number of improvements to the LogMiner-based capture implementation for the Debezium Oracle connector, support for Vitess 9.0, and much more. Let&amp;#8217;s explore some of the new features in the following.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;debezium_ui&quot;&gt;Debezium UI&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The different Debezium connectors provide great power and flexibility for setting up and running change data capture sources for a range of databases. But this flexibility also comes at a cost: getting started with the connectors can take some time for understanding all the different options and their semantics. Another critical aspect is operating the connectors, i.e. gaining insight into their current status and metrics, being able to react to connector failures, and more etc.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Based on this feedback from the community, we &lt;a href=&quot;/blog/2020/10/22/towards-debezium-ui/&quot;&gt;have explored&lt;/a&gt; over the last few months how a graphical user interface could help with these matters. The initial proof-of-concept looked very promising, so we decided to move forward and make the &lt;a href=&quot;https://github.com/debezium/debezium-ui/&quot;&gt;UI&lt;/a&gt; an official component of the Debezium project. Still under active development, you already can try out the UI today (available as a &lt;a href=&quot;https://hub.docker.com/r/debezium/debezium-ui&quot;&gt;container image on Docker Hub&lt;/a&gt;) and use it to set up Debezium connectors in your Kafka Connect clusters.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We&amp;#8217;ll follow up with more details on the Debezium UI in a separate blog post within the next few days, discussing its current status, the roadmap for this component, and more.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;improved_logminer_based_cdc_implementation&quot;&gt;Improved LogMiner-based CDC Implementation&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Continuing our current focus on the LogMiner-based CDC implementation for Oracle, we&amp;#8217;ve fixed a substantial number of issues for this connector. Amongst them are:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Drastically improved DML parsing performance (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3078&quot;&gt;DBZ-3078&lt;/a&gt;); a new hand-written parser for the LogMiner DML statements allows for better throughput of this connector, the existing external parser implementation will be removed very soon&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Support for capturing changes from multiple schemas (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3009&quot;&gt;DBZ-3009&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Support for column filtering (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3167&quot;&gt;DBZ-3167&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Correct transaction metadata (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3090&quot;&gt;DBZ-3090&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Several bug fixes related to log file switching and similar (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2754&quot;&gt;DBZ-2754&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3001&quot;&gt;DBZ-3001&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3153&quot;&gt;DBZ-3153&lt;/a&gt;, etc.)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;vitess_connector&quot;&gt;Vitess Connector&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Led by community member Kewei Shang, the Debezium connector for Vitess now supports Vitess 9.0 (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3100&quot;&gt;DBZ-3100&lt;/a&gt;). The connector also can capture changes from JSON and ENUM columns (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3115&quot;&gt;DBZ-3115&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3124&quot;&gt;DBZ-3124&lt;/a&gt;), and it implements the configuration validation API of Kafka Connect (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3117&quot;&gt;DBZ-3117&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;other_features&quot;&gt;Other Features&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Further fixes and improvements in this release including the following:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The Debezium MySQL connector can expose metadata about transaction boundaries (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3114&quot;&gt;DBZ-3114&lt;/a&gt;); this is one of the first benefits we obtain by rebasing this connector onto the common Debezium connector framework, as discussed in the &lt;a href=&quot;/blog/2021/02/08/debezium-1-5-alpha1-released/&quot;&gt;1.5.0.Alpha1&lt;/a&gt; release announcement&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Debezium connector for Postgres is tested and validated against PG 13 (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3022&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DBZ-3022&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Ability to customize offsets when using the Debezium embedded API (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2897&quot;&gt;DBZ-2897&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Support for &lt;code&gt;CREATE OR REPLACE INDEX&lt;/code&gt; DDL when using the MySQL connector with MariaDB (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3067&quot;&gt;DBZ-3067&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Infinite timestamp values supported with Postgres (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2614&quot;&gt;DBZ-2614&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Altogether, a grand total of &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.5.0.Beta1%20ORDER%20BY%20component%20ASC&quot;&gt;78 issues&lt;/a&gt; have been addressed for this release.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As always, a big thanks you to all the community members who contributed: &lt;a href=&quot;https://github.com/adhaamehab&quot;&gt;Adhaam Ehab&lt;/a&gt;, &lt;a href=&quot;https://github.com/ahmedjami&quot;&gt;Ahmed Eljami&lt;/a&gt;, &lt;a href=&quot;https://github.com/bingqinzhou&quot;&gt;Bingqin Zhou&lt;/a&gt;, &lt;a href=&quot;https://github.com/fahimfarookme&quot;&gt;Fahim Farook&lt;/a&gt;, &lt;a href=&quot;https://github.com/rgannu&quot;&gt;Ganesh Ramasubramanian&lt;/a&gt;, &lt;a href=&quot;https://github.com/harveyyue&quot;&gt;Harvey Yue&lt;/a&gt;, &lt;a href=&quot;https://github.com/kppullin&quot;&gt;Kevin Pullin&lt;/a&gt;, &lt;a href=&quot;https://github.com/keweishang&quot;&gt;Kewei Shang&lt;/a&gt;, &lt;a href=&quot;https://github.com/michaelcizmar&quot;&gt;Michael Cizmar&lt;/a&gt;, &lt;a href=&quot;https://github.com/nitin456&quot;&gt;Nitin Agarwal&lt;/a&gt;, &lt;a href=&quot;https://github.com/r-ballard&quot;&gt;Russell Ballard&lt;/a&gt;, &lt;a href=&quot;https://github.com/mrshanepaul&quot;&gt;Shane Paul&lt;/a&gt;, &lt;a href=&quot;https://github.com/tprelle&quot;&gt;Thomas Prelle&lt;/a&gt;, &lt;a href=&quot;https://github.com/twthorn&quot;&gt;Thomas Thornton&lt;/a&gt;, and &lt;a href=&quot;https://github.com/Cyril-Engels&quot;&gt;Yilong Chang&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Gunnar Morling</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">I&amp;#8217;m very happy to announce the release of Debezium 1.5.0.Beta1! This release adds a brand-new component&amp;#8201;&amp;#8212;&amp;#8201;the web-based Debezium UI --, transaction metadata support for the MySQL connector, a large number of improvements to the LogMiner-based capture implementation for the Debezium Oracle connector, support for Vitess 9.0, and much more. Let&amp;#8217;s explore some of the new features in the following.</summary></entry><entry><title type="html">Debezium 1.5.0.Alpha1 Released</title><link href="https://debezium.io/blog/2021/02/08/debezium-1-5-alpha1-released/" rel="alternate" type="text/html" title="Debezium 1.5.0.Alpha1 Released"/><published>2021-02-08T00:00:00+00:00</published><updated>2021-02-08T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/02/08/debezium-1-5-alpha1-released</id><content type="html" xml:base="https://debezium.io/blog/2021/02/08/debezium-1-5-alpha1-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;It&amp;#8217;s my pleasure to announce the first release of the Debezium 1.5 series, &lt;strong&gt;1.5.0.Alpha1&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release brings many improvements to the LogMiner-based capture implementation for the Debezium Oracle connector, a large overhaul of the MySQL connector, as well as a wide range of bug fixes and other small feature additions.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;improved_logminer_based_capture_implementation&quot;&gt;Improved LogMiner-based Capture Implementation&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Since we&amp;#8217;ve announced the LogMiner-based implementation for the Debezium Oracle connector in &lt;a href=&quot;/blog/2020/10/01/debezium-1-3-final-released/&quot;&gt;Debezium 1.3&lt;/a&gt;, we&amp;#8217;ve seen a constantly growing interest in this connector by folks from our lively community, who tested it out, provided feedback, logged bug reports and feature requests, submitted pull requests with fixes, and more. Based on all this input, the connector is rapidly maturing, and we aim to move the LogMiner-based implementation from &quot;Incubating&quot; to &quot;Stable&quot; state in Debezium 1.5, or 1.6 the latest. This first Alpha release of Debezium 1.5 contains a number of related improvements:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;java.sql.SQLException: ORA-01333: failed to establish Logminer Dictionary (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2939&quot;&gt;DBZ-2939&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Capture and report LogMiner state when mining session fails to start (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3055&quot;&gt;DBZ-3055&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Debezium Oracle Connector will appear stuck on large SCN jumps (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2982&quot;&gt;DBZ-2982&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Improve logging for Logminer adapter (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2999&quot;&gt;DBZ-2999&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Many thanks Martín Pérez, Milo van der Zee, Anton Kondratev, and all the others for their intensive testing, feedback, and contributions while working on this! One of the next steps in this area will be several performance-related improvements; stay tuned for the details.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;reworked_mysql_connector&quot;&gt;Reworked MySQL Connector&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;In order to reduce the maintenance effort for all the different Debezium connectors, we&amp;#8217;ve started work towards a common connector framework long time ago. This framework allows us to implement many features (and bug fixes) just once, and all the connectors based on this framework will be able to benefit from it. By now, almost all of the Debezium connectors have been ported to this framework, with the exception of the Cassandra and MySQL connectors.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;As of this release, also the MySQL connector provides an implementation based on this framework. Since the MySQL connector has been the first one amongst the Debezium connectors, and it has quite a few specific characteristics and features, we have decided to not simply replace the existing implementation with a new one, but rather keep both, existing and new, side by side for some time.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This allows the new implementation to mature, also giving users the choice of which implementation to use. While the new connector implementation is the default one as of this release, you can go back to the earlier one by setting the &lt;code&gt;internal.implementation&lt;/code&gt; option to &lt;code&gt;legacy&lt;/code&gt;. We don&amp;#8217;t have any immediate plans for removing the existing implementation, but focus for feature work and bug fixes will shift to the new implementation going forward. Please give the new connector implementation a try and let us know if you encounter any issues with it.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;While the new implementation is largely on par feature-wise with with the earlier one, there&amp;#8217;s one exception: the previous, experimental support for changing the filter configuration of a connector instance isn&amp;#8217;t part of the new implementation. We&amp;#8217;re planning to roll out a comparable feature for all the framework-based connectors in the near future. Now that there also is a framework-based implementation for the MySQL connector, we&amp;#8217;re planning to provide a range of improvements to snapshotting for all the (relational) connectors: for instance the aforementioned capability to change filter configurations, means of parallelizing snapshot operations, and more.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;other_features&quot;&gt;Other Features&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Besides these key features, there&amp;#8217;s a range of other improvements, smaller new features, and bug fixes coming with this release, including the following:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Correct handling of lists of user types in the Cassandra connector (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2974&quot;&gt;DBZ-2974&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Multiple DDL parser fixes for MySQL and MariaDB (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3018&quot;&gt;DBZ-3018&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3020&quot;&gt;DBZ-3020&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3023&quot;&gt;DBZ-3023&lt;/a&gt;, &lt;a href=&quot;https://issues.redhat.com/browse/DBZ-3039&quot;&gt;DBZ-3039&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Better snapshotting performance for large Postgres schemas with many tables (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2575&quot;&gt;DBZ-2575&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Ability to emit &lt;code&gt;TRUNCATE&lt;/code&gt; events via the Postgres connector (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2382&quot;&gt;DBZ-2382&lt;/a&gt;); note that, when enabled, this adds a new &lt;code&gt;op&lt;/code&gt; type &lt;code&gt;t&lt;/code&gt; for this connector&amp;#8217;s change events, so please ensure your consumers can handle such events gracefully&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Thanks to the work of &lt;a href=&quot;https://github.com/keweishang&quot;&gt;Kewei Shang&lt;/a&gt;, there is now instructions for following the Debezium tutorial example &lt;a href=&quot;https://github.com/debezium/debezium-examples/tree/master/tutorial#using-vitess&quot;&gt;using the incubating connector for Vitess&lt;/a&gt; (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2678&quot;&gt;DBZ-2678&lt;/a&gt;), which was added in Debezium 1.4:&lt;/p&gt; &lt;div class=&quot;imageblock centered-image&quot;&gt; &lt;img src=&quot;/assets/images/vitess-sharding-setup.png&quot; class=&quot;responsive-image&quot; alt=&quot;Vitess Tutorial Example Overview&quot; style=&quot;max-width:90%;&quot;&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Altogether, &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.5.0.Alpha1%20ORDER%20BY%20component%20ASC&quot;&gt;32 issues&lt;/a&gt; were fixed for this release. A big thank you goes out to all the community members who contributed: &lt;a href=&quot;https://github.com/bingqinzhou&quot;&gt;Bingqin Zhou&lt;/a&gt;, &lt;a href=&quot;https://github.com/davecramer&quot;&gt;Dave Cramer&lt;/a&gt; &lt;a href=&quot;https://github.com/keweishang&quot;&gt;Kewei Shang&lt;/a&gt;, &lt;a href=&quot;https://github.com/mpermar&quot;&gt;Martín Pérez&lt;/a&gt;, &lt;a href=&quot;https://github.com/msillence&quot;&gt;Martin Sillence&lt;/a&gt;, &lt;a href=&quot;https://github.com/pkpfr&quot;&gt;Nick Murray&lt;/a&gt;, and &lt;a href=&quot;https://github.com/krnaveen14&quot;&gt;Naveen Kumar&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;For the upcoming 1.5 preview releases, we&amp;#8217;re planning to focus on further improving and stabilizing the LogMiner-based connector implementation for Oracle, wrap up some loose ends around the MySQL connector migration, and begin to explore the aforementioned snapshotting improvements.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We&amp;#8217;ve also made the decision to continue our efforts for creating a &lt;a href=&quot;/blog/2020/10/22/towards-debezium-ui/&quot;&gt;graphical Debezium user interface&lt;/a&gt;; this component is currently under active development, with support for more connectors, functionality for (re-)starting and stopping connectors, examining logs, and much more in the workings. If things go as planned, the UI will officially be part of the next Debezium 1.5 preview release!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Gunnar Morling</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">It&amp;#8217;s my pleasure to announce the first release of the Debezium 1.5 series, 1.5.0.Alpha1! This release brings many improvements to the LogMiner-based capture implementation for the Debezium Oracle connector, a large overhaul of the MySQL connector, as well as a wide range of bug fixes and other small feature additions.</summary></entry><entry><title type="html">Debezium 1.4.1.Final Released</title><link href="https://debezium.io/blog/2021/01/28/debezium-1-4-1-final-released/" rel="alternate" type="text/html" title="Debezium 1.4.1.Final Released"/><published>2021-01-28T00:00:00+00:00</published><updated>2021-01-28T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/01/28/debezium-1-4-1-final-released</id><content type="html" xml:base="https://debezium.io/blog/2021/01/28/debezium-1-4-1-final-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;I&amp;#8217;m pleased to announce the release of Debezium &lt;strong&gt;1.4.1.Final&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;We highly recommend upgrading from 1.4.0.Final and earlier versions as this release includes bug fixes and enhancements to several Debezium connectors which includes some of the following: &lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[MySQL] - Use collation to get charset when charset is not set (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2922&quot;&gt;DBZ-2922&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[MySQL] - Debezium Connectors are failing while reading binlog: Unknown event type 100 (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2499&quot;&gt;DBZ-2499&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[MySQL] - Some column default values are not extracted correctly while reading table structure (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2698&quot;&gt;DBZ-2698&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[MySQL] - Default database charset is not recorded (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2921&quot;&gt;DBZ-2921&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[MySQL] - Labeled create procedure&amp;#8217;s body is not parsed (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2972&quot;&gt;DBZ-2972&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Oracle] - Supplemental logging is required for entire database rather than per monitored table (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2711&quot;&gt;DBZ-2711&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Oracle] - Missing log file error when current SCN differs from snapshotted in Oracle connector and Logminer (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2855&quot;&gt;DBZ-2855&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Oracle] - DML statements longer than 4000 characters are incorrectly combined from V$LOGMNR_CONTENTS (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2920&quot;&gt;DBZ-2920&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Oracle] - Snapshot causes ORA-08181 exception (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2949&quot;&gt;DBZ-2949&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Oracle] - Deadlock in the XStream handler and offset commiter call concurrently (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2891&quot;&gt;DBZ-2891&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Oracle] - Debezium swallows DML exception in certain cases (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2981&quot;&gt;DBZ-2981&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Oracle] - Implement Scn as a domain type (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2518&quot;&gt;DBZ-2518&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[PostgreSQL] - Instable test: PostgresConnectorIT#testCustomSnapshotterSnapshotCompleteLifecycleHook() (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2938&quot;&gt;DBZ-2938&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[PostgreSQL] - Postgres connector config validation fails because current connector is occupying replication slot (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2952&quot;&gt;DBZ-2952&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[SQL Server] - Add support for binary.handling.mode to the SQL Server connector (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2912&quot;&gt;DBZ-2912&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[SQL Server] - Retry on &quot;The server failed to resume the transaction&quot; (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2959&quot;&gt;DBZ-2959&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Vitess] - Sanitise DECIMAL string from VStream (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2906&quot;&gt;DBZ-2906&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Vitess] - Vitess Connector download link missing on website (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2907&quot;&gt;DBZ-2907&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Dependencies] - Upgrade to Apache Kafka Connect 2.6.1 (&lt;a href=&quot;https://issues.redhat.com/browse/DBZ-2630&quot;&gt;DBZ-2630&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Altogether, &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.4.1.Final&quot;&gt;35 issues&lt;/a&gt; were resolved in this release. Please refer to the &lt;a href=&quot;/releases/1.4/release-notes/#release-1.4.1-final&quot;&gt;release notes&lt;/a&gt; to learn more about all fixed bugs, update procedures etc.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;A big thank you to everyone who helped test and identify these bugs and contributed to this release: &lt;a href=&quot;https://github.com/ahmedjami&quot;&gt;Ahmed Eljami&lt;/a&gt;, &lt;a href=&quot;https://github.com/isopropylcyanide&quot;&gt;Aman Garg&lt;/a&gt;, &lt;a href=&quot;https://github.com/ant0nk&quot;&gt;Anton Kondratev&lt;/a&gt;, &lt;a href=&quot;https://github.com/zxxz&quot;&gt;Giovanni De Stefano&lt;/a&gt;, &lt;a href=&quot;https://github.com/ismailsimsek&quot;&gt;Ismail Simsek&lt;/a&gt;, &lt;a href=&quot;https://github.com/keweishang&quot;&gt;Kewei Shang&lt;/a&gt;, &lt;a href=&quot;https://github.com/mpermar&quot;&gt;Martin Perez&lt;/a&gt;, &lt;a href=&quot;https://github.com/NishantSinghChandel&quot;&gt;Nishant Singh&lt;/a&gt;, &lt;a href=&quot;https://github.com/morozov&quot;&gt;Sergei Morozov&lt;/a&gt;, &lt;a href=&quot;https://github.com/victorxiang30&quot;&gt;Shuguang Xiang&lt;/a&gt;, &lt;a href=&quot;https://github.com/siufay325&quot;&gt;siufay325&lt;/a&gt;, and &lt;a href=&quot;https://github.com/tjg184&quot;&gt;Troy Gaines&lt;/a&gt;!&lt;/p&gt; &lt;/div&gt;</content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="mongodb"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="debezium-server"/><category term="outbox"/><summary type="html">I&amp;#8217;m pleased to announce the release of Debezium 1.4.1.Final! We highly recommend upgrading from 1.4.0.Final and earlier versions as this release includes bug fixes and enhancements to several Debezium connectors which includes some of the following:</summary></entry><entry><title type="html">Debezium 1.4.0.Final Released</title><link href="https://debezium.io/blog/2021/01/07/debezium-1-4-final-released/" rel="alternate" type="text/html" title="Debezium 1.4.0.Final Released"/><published>2021-01-07T00:00:00+00:00</published><updated>2021-01-07T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/01/07/debezium-1-4-final-released</id><content type="html" xml:base="https://debezium.io/blog/2021/01/07/debezium-1-4-final-released/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;I am pleased to announce the release of Debezium &lt;strong&gt;1.4.0.Final&lt;/strong&gt;!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;This release concludes the major work put into Debezium over the last three months. Overall, the community fixed &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20in%20(1.4.0.Final%2C%201.4.0.Alpha1%2C%201.4.0.Beta1%2C%201.4.0.CR1)%20ORDER%20BY%20issuetype%20DESC%2C%20updated%20DESC%2C%20priority%20DESC&quot;&gt;117 issues&lt;/a&gt; during that time, including the following key features and changes:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;New &lt;a href=&quot;/documentation/reference/connectors/vitess.html&quot;&gt;Vitess&lt;/a&gt; connector, featured in an in-depth &lt;a href=&quot;/blog/2020/11/04/streaming-vitess-at-bolt/&quot;&gt;blog post&lt;/a&gt; by Kewei Shang&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Fine-grained selection of snapshotted tables&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;PostgreSQL &lt;code&gt;Snapshotter&lt;/code&gt; completion hook&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Distributed &lt;a href=&quot;/blog/2020/12/16/distributed-tracing-with-debezium/&quot;&gt;Tracing&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;MySQL support for &lt;em&gt;create&lt;/em&gt; or &lt;em&gt;read&lt;/em&gt; records emitted during snapshot&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Many Oracle &lt;a href=&quot;/documentation/reference/connectors/oracle.html#_logminer&quot;&gt;Logminer adapter&lt;/a&gt; improvements&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Full support for Oracle JDBC connection strings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Improved reporting of DDL errors&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Please refer to previous release announcements (&lt;a href=&quot;/blog/2020/10/23/debezium-1-4-alpha1-released/&quot;&gt;Alpha1&lt;/a&gt;, &lt;a href=&quot;/blog/2020/11/17/debezium-1-4-alpha2-released/&quot;&gt;Alpha2&lt;/a&gt;, &lt;a href=&quot;/blog/2020/12/09/debezium-1-4-beta1-released/&quot;&gt;Beta1&lt;/a&gt;, &lt;a href=&quot;/blog/2020/12/17/debezium-1-4-cr1-released/&quot;&gt;CR1&lt;/a&gt;) for more details. Since the CR1 release just before the holidays, we&amp;#8217;ve &lt;a href=&quot;https://issues.redhat.com/issues/?jql=project%20%3D%20DBZ%20AND%20fixVersion%20%3D%201.4.0.Final%20ORDER%20BY%20issuetype%20DESC%2C%20updated%20DESC%2C%20priority%20DESC&quot;&gt;focused&lt;/a&gt; on addressing some remaining bugs and improvements.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Thank you to everyone involved in testing the previous releases, this is invaluable by spotting and addressing any problems with new features as well as regressions. And of course we&amp;#8217;d like to thank all the community members contributing to this release: &lt;a href=&quot;https://github.com/alisator&quot;&gt;Alisa Houskova&lt;/a&gt;, &lt;a href=&quot;https://github.com/ani-sha&quot;&gt;Anisha Mohanty&lt;/a&gt;, &lt;a href=&quot;https://github.com/AndreyIg&quot;&gt;Andrey Ignatenko&lt;/a&gt;, &lt;a href=&quot;https://github.com/bingqinzhou&quot;&gt;Bingqin Zhou&lt;/a&gt;, &lt;a href=&quot;https://github.com/bduisenov&quot;&gt;Babur Duisenov&lt;/a&gt;, &lt;a href=&quot;https://github.com/creactiviti&quot;&gt;Arik Cohen&lt;/a&gt;, &lt;a href=&quot;https://github.com/Faizan&quot;&gt;Faizan&lt;/a&gt;, &lt;a href=&quot;https://github.com/grantcooksey&quot;&gt;Grant Cooksey&lt;/a&gt;, &lt;a href=&quot;https://github.com/hauntingEcho&quot;&gt;Matt Beary&lt;/a&gt;, &lt;a href=&quot;https://github.com/hussain-k1&quot;&gt;Mohamed Pudukulathan&lt;/a&gt;, &lt;a href=&quot;https://github.com/morozov&quot;&gt;Sergei Morozov&lt;/a&gt;, &lt;a href=&quot;https://github.com/keweishang&quot;&gt;Kewei Shang&lt;/a&gt;, &lt;a href=&quot;https://github.com/mans2singh&quot;&gt;Mans Singh&lt;/a&gt;, &lt;a href=&quot;https://github.com/martper2&quot;&gt;Martin Perez&lt;/a&gt;, &lt;a href=&quot;https://github.com/michaelwang&quot;&gt;Michael Wang&lt;/a&gt;, &lt;a href=&quot;https://github.com/Iskuskov&quot;&gt;Alexander Iskuskov&lt;/a&gt; &lt;a href=&quot;https://github.com/jgormley6&quot;&gt;James Gormley&lt;/a&gt;, &lt;a href=&quot;https://github.com/jinguangyang&quot;&gt;jinguangyang&lt;/a&gt;, &lt;a href=&quot;https://github.com/KaushikIyer16&quot;&gt;Kaushik Iyer&lt;/a&gt;, &lt;a href=&quot;https://github.com/jeremy-l-ford&quot;&gt;Jeremy Ford&lt;/a&gt;, &lt;a href=&quot;https://github.com/johnjmartin&quot;&gt;John Martin&lt;/a&gt;, &lt;a href=&quot;https://github.com/ramanenka&quot;&gt;Vadzim Ramanenka&lt;/a&gt;, &lt;a href=&quot;https://github.com/rareddy&quot;&gt;Ramesh Reddy&lt;/a&gt;, &lt;a href=&quot;https://github.com/rgannu&quot;&gt;Ganesh Ramasubramanian&lt;/a&gt;, &lt;a href=&quot;https://github.com/seeekr&quot;&gt;Denis Andrejew&lt;/a&gt;, &lt;a href=&quot;https://github.com/telnicky&quot;&gt;Travis Elnicky&lt;/a&gt;, &lt;a href=&quot;https://github.com/vanhoale&quot;&gt;Hoa Le&lt;/a&gt;, &lt;a href=&quot;https://github.com/yimingl17&quot;&gt;Yiming Liu&lt;/a&gt;, &lt;a href=&quot;https://github.com/yrodiere&quot;&gt;Yoann Rodière&lt;/a&gt;, and &lt;a href=&quot;https://github.com/zrlurb&quot;&gt;Peter Urbanetz&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Overall, more than 245 individuals have contributed to the Debezium project and the number of Debezium &lt;a href=&quot;/community/users/&quot;&gt;users&lt;/a&gt; continues to grow. As we usher in 2021, check out our &lt;a href=&quot;/blog/2021/01/06/debezium-2020-recap/&quot;&gt;recap of Debezium in 2020&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;sect1&quot;&gt; &lt;h2 id=&quot;outlook&quot;&gt;Outlook&lt;/h2&gt; &lt;div class=&quot;sectionbody&quot;&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;With 1.4 Final released, planning for the 1.5 version (due by the end of March) is currently underway. The &lt;a href=&quot;/roadmap/&quot;&gt;roadmap&lt;/a&gt; is still being discussed, so be sure to let us know about your requirements and feature requests. Some of the things we&amp;#8217;re considering for this next release are:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Moving the MySQL connector to the CDC connector framework shared by most other Debezium connectors; this will drastically reduce maintenance burden of this connector in the future&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Exploring more powerful snapshotting options (e.g. for parallelization and re-doing snapshots of selected tables)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Continued stability and improvements to the new LogMiner-based implementation for Oracle&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Until then remain safe, it&amp;#8217;s onwards and upwards from here!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</content><author><name>Chris Cranford</name></author><category term="releases"/><category term="mysql"/><category term="postgres"/><category term="sqlserver"/><category term="cassandra"/><category term="oracle"/><category term="db2"/><category term="vitess"/><category term="outbox"/><summary type="html">I am pleased to announce the release of Debezium 1.4.0.Final! This release concludes the major work put into Debezium over the last three months. Overall, the community fixed 117 issues during that time, including the following key features and changes: New Vitess connector, featured in an in-depth blog post by Kewei Shang Fine-grained selection of snapshotted tables PostgreSQL Snapshotter completion hook Distributed Tracing MySQL support for create or read records emitted during snapshot Many Oracle Logminer adapter improvements Full support for Oracle JDBC connection strings Improved reporting of DDL errors</summary></entry><entry><title type="html">Debezium in 2020 – The Recap!</title><link href="https://debezium.io/blog/2021/01/06/debezium-2020-recap/" rel="alternate" type="text/html" title="Debezium in 2020 – The Recap!"/><published>2021-01-06T00:00:00+00:00</published><updated>2021-01-06T00:00:00+00:00</updated><id>https://debezium.io/blog/2021/01/06/debezium-2020-recap</id><content type="html" xml:base="https://debezium.io/blog/2021/01/06/debezium-2020-recap/">&lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;A Happy New Year to the Debezium Community!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;May all your endavours be successful, your data be consistent, and most importantly, everyone stay safe and healthy. With 2020 in the books, I thought it&amp;#8217;d be nice to take a look back and do a quick recap of what has happened around Debezium over the last year.&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;First, some facts and numbers for you stats lovers out there:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;After the release of &lt;a href=&quot;/blog/2019/12/18/debezium-1-0-0-final-released/&quot;&gt;Debezium 1.0&lt;/a&gt; in December 2019, we successfully released a stable Debezium version at the end of each quarter, with preview releases roughly every three weeks&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;About 1,400 commits in the core repo (plus many more in the other ones), 36 blog posts and release announcements, 166 threads on the &lt;a href=&quot;https://groups.google.com/g/debezium/&quot;&gt;mailing list&lt;/a&gt; (if the query in my Google inbox is to be trusted)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;About 100 new contributors, bringing the &lt;a href=&quot;https://github.com/debezium/debezium/blob/master/COPYRIGHT.txt&quot;&gt;overall number&lt;/a&gt; of people contributing to the Debezium core repo to 245, plus additional people contributing to the other repositories of the Debezium GitHub organization&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first &lt;a href=&quot;https://developers.redhat.com/blog/2020/04/14/capture-database-changes-with-debezium-apache-kafka-connectors/&quot;&gt;GA release&lt;/a&gt; of the commercially supported Debezium offering by Red Hat, as part of &lt;a href=&quot;https://www.redhat.com/en/products/integration&quot;&gt;Red Hat Integration&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;/blog/2020/07/28/hello-debezium/&quot;&gt;Two&lt;/a&gt; &lt;a href=&quot;/blog/2020/10/27/hello-debezium/&quot;&gt;new&lt;/a&gt; members on the core engineering team&amp;#8201;&amp;#8212;&amp;#8201;the more, the merrier!&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;About 1,600 additional GitHub ⭐s for the Debezium core repo, bringing the total number of star gazers to more than 4,100&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;exampleblock centered-image responsive-image&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;img src=&quot;/assets/images/github_stars_2020.png&quot; style=&quot;max-width:75%;&quot; class=&quot;responsive-image&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;While those figures give a nice impression of the overall activity of Debezium, they don&amp;#8217;t really tell &lt;em&gt;what&lt;/em&gt; has been happening exactly. What&amp;#8217;s behind the numbers? Here are some of my personal Debezium highlights from the last year:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Two new, community-led Debezium connectors for &lt;a href=&quot;https://github.com/debezium/debezium-connector-db2/&quot;&gt;Db2&lt;/a&gt; and &lt;a href=&quot;https://github.com/debezium/debezium-connector-vitess/&quot;&gt;Vitess&lt;/a&gt;; a big shout-out to the engineers of &lt;a href=&quot;/blog/2020/03/05/db2-cdc-approaches/&quot;&gt;IBM&lt;/a&gt; and &lt;a href=&quot;/blog/2020/11/04/streaming-vitess-at-bolt/&quot;&gt;Bolt&lt;/a&gt;, respectively, for stepping up and taking the lead of these connectors!&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Besides these new connectors, each of the releases brought a wide range of new features; some of the things I&amp;#8217;m most excited about are &lt;a href=&quot;/documentation/reference/1.2/operations/debezium-server.html&quot;&gt;Debezium Server&lt;/a&gt; for integrating Debezium with message infrastructure like Apache Pulsar, AWS Kinesis, Google Cloud Pub/Sub, and Azure Event Hubs, the &lt;a href=&quot;/documentation/reference/1.1/integrations/outbox.html&quot;&gt;Quarkus extension&lt;/a&gt; for implementing the outbox pattern, the new &lt;a href=&quot;/documentation/reference/connectors/oracle.html#_logminer&quot;&gt;LogMiner-based connector implementation&lt;/a&gt; for ingesting change events from Oracle, transaction markers, support for CloudEvents, and so much more!&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Integration of Debezium by multiple open-source projects, e.g. &lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/connectors/formats/debezium.html&quot;&gt;Apache Flink&lt;/a&gt;, &lt;a href=&quot;https://spring.io/blog/2020/12/14/case-study-change-data-capture-cdc-analysis-with-cdc-debezium-source-and-analytics-sink-in-real-time&quot;&gt;Spring Cloud Stream&lt;/a&gt;, &lt;a href=&quot;https://jet-start.sh/docs/tutorials/cdc&quot;&gt;Hazecast Jet&lt;/a&gt;, and &lt;a href=&quot;https://camel.apache.org/blog/2020/05/CdcWithCamelAndDebezium/&quot;&gt;Apache Camel&lt;/a&gt;. Further integrators of Debezium include &lt;a href=&quot;https://materialize.io/docs/third-party/debezium/&quot;&gt;Materialize&lt;/a&gt;, &lt;a href=&quot;https://cloud.google.com/blog/products/data-analytics/how-to-move-data-from-mysql-to-bigquery&quot;&gt;Google Cloud DataFlow&lt;/a&gt; and &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-data-connectors&quot;&gt;Heroku’s streaming data connectors&lt;/a&gt;. Here on this blog, we also discussed how to integrate and use Debezium with technologies such as &lt;a href=&quot;/blog/2020/03/19/integration-testing-for-change-data-capture-with-testcontainers/&quot;&gt;Testcontainers&lt;/a&gt;, the &lt;a href=&quot;/blog/2020/04/09/using-debezium-with-apicurio-api-schema-registry/&quot;&gt;Apicurio API and schema registry&lt;/a&gt;, and &lt;a href=&quot;/blog/2020/12/16/distributed-tracing-with-debezium/&quot;&gt;OpenTracing&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Debezium being &lt;a href=&quot;https://www.thoughtworks.com/radar/platforms/debezium&quot;&gt;listed at &quot;Trial&quot; level&lt;/a&gt; on the ThoughtWorks Tech Radar&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A proof-of-concept for a &lt;a href=&quot;/blog/2020/10/22/towards-debezium-ui/&quot;&gt;graphical user interface for configuring and operating Debezium&lt;/a&gt;; stay tuned for more details here, as this is currently in the process of being built out for other connectors&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;The year also brought a large number of blog posts and presentations from the community about their experiences with Debezium. You can find our full list of Debezium-related resources &lt;a href=&quot;debezium.io/documentation/online-resources/&quot;&gt;here&lt;/a&gt; (please send a PR for adding anything you think should be listed there). Some contents I particularly enjoyed include:&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;ulist&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://static.sched.com/hosted_files/ossna2020/c6/Managing Data Consistency with Debezium.pdf&quot;&gt;&quot;Managing Data Consistency Among Microservices with Debezium&quot;&lt;/a&gt; by Justin Chao&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://noti.st/morsapaes/liQzgs/change-data-capture-with-flink-sql-and-debezium&quot;&gt;&quot;Change Data Capture with Flink SQL and Debezium&quot;&lt;/a&gt; by Marta Paes&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6nU9i022yeY&quot;&gt;&quot;Microservices &amp;amp; Data: Implementing the Outbox Pattern with Debezium&quot;&lt;/a&gt; by Thorben Janssen&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.systemcraftsman.com/2020/11/30/asap-the-storified-demo-of-introduction-to-debezium-and-kafka-on-kubernetes/&quot;&gt;&quot;ASAP! – The Storified Demo of Introduction to Debezium and Kafka on Kubernetes&quot;&lt;/a&gt; by Aykut Bulgu&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://elephanttamer.net/?p=50&quot;&gt;&quot;Setting up PostgreSQL for Debezium&quot;&lt;/a&gt; by Michał Mackiewicz&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://medium.com/@midhunsukumaran.mec/a-year-and-a-half-with-debezium-f4f323b4909d&quot;&gt;&quot;A year and a half with Debezium: CDC With MySQL&quot;&lt;/a&gt; by Midhun Sukumaran&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://developers.redhat.com/cheat-sheets/debezium-openshift-cheat-sheet&quot;&gt;&quot;Debezium on OpenShift Cheat Sheet&quot;&lt;/a&gt; by Abdellatif Bouchama&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://medium.com/@changeant/implementing-the-transactional-outbox-pattern-with-debezium-in-quarkus-f2680306951&quot;&gt;&quot;Implementing the Transactional Outbox pattern with Debezium in Quarkus&quot;&lt;/a&gt; by Iain Porter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://www.confluent.io/blog/cdc-and-streaming-analytics-using-debezium-kafka/&quot;&gt;&quot;Analysing Changes with Debezium and Kafka Streams&quot;&lt;/a&gt; by Mike Fowler&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://medium.com/@bogdan.dina03/de-coupling-yourself-507a15fa100d&quot;&gt;&quot;(De)coupling yourself&quot;&lt;/a&gt; by Dina Bogdan&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://medium.com/@limadelrey/kafka-connect-how-to-create-a-real-time-data-pipeline-using-change-data-capture-cdc-c60e06e5306a&quot;&gt;&quot;Kafka Connect: How to create a real time data pipeline using Change Data Capture (CDC)&quot;&lt;/a&gt; by Francisco Lima&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://dev.to/abhirockzz/tutorial-set-up-a-change-data-capture-architecture-on-azure-using-debezium-postgres-and-kafka-49h6&quot;&gt;&quot;Tutorial: Set up a Change Data Capture architecture on Azure using Debezium, Postgres and Kafka &quot;&lt;/a&gt; by Abhishek Gupta&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;It is just so amazing to see how engaged and helpful this community is; A big thank you to everyone for writing and talking about your experiences with Debezium and change data capture!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;I think 2020 has been a great year for the Debezium community, and I couldn&amp;#8217;t be happier about all the things we&amp;#8217;ve achieved together. Again, a huge thank you to each and everyone in the community contributing to the project, be it via by implementing features and bug fixes, reporting issues, engaging in discussions, answering questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/debezium&quot;&gt;Stack Overflow&lt;/a&gt;, helping to spread the word in blog posts and conference talks, or otherwise!&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;What&amp;#8217;s on the roadmap for this year? It&amp;#8217;s fair to say: &quot;A lot&quot; :) E.g. we&amp;#8217;d like to rework the way snapshots are done: they should be parallelizeable, updates to the include/exclude filters should be possible, and more. The Debezium UI will see substantial expansion and improvements. We&amp;#8217;re planning to conduct a systematic performance profiling and improvements of identified bottlenecks. There may be official support for MariaDB, as well as an operator for running Debezium Server on Kubernetes. Plus some super-cool things I cannot talk about at this point yet :)&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;paragraph&quot;&gt; &lt;p&gt;Onwards and Upwards!&lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;footnotes&quot;&gt; &lt;hr&gt; &lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt; &lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Where is Debezium 1.4, you ask? The agile bunch we are, we adhered to the &quot;Individuals over processes&quot; principle and decided to move this release to later this week, due to the holiday break :) &lt;/div&gt; &lt;/div&gt;</content><author><name>Gunnar Morling</name></author><category term="discussion"/><summary type="html">A Happy New Year to the Debezium Community! May all your endavours be successful, your data be consistent, and most importantly, everyone stay safe and healthy. With 2020 in the books, I thought it&amp;#8217;d be nice to take a look back and do a quick recap of what has happened around Debezium over the last year. First, some facts and numbers for you stats lovers out there:</summary></entry></feed>